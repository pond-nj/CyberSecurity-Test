{"version":3,"file":"SignIn-42f5a985.js","sources":["../src/ui/NativeAuth/pages/SignIn.tsx"],"sourcesContent":["import React from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { INativePage } from '../../uiTypes';\nimport { Form, HeaderText, View, Input, SubmitButton, SecondaryButton, ForgotPassword, SpacerS, SpacerXL, MainView } from '../components';\n\nconst { useEasybase } = require('easybase-react');\n\nexport default function ({ setCurrentPage, dictionary, toast }: INativePage) {\n    const { control, handleSubmit, reset, formState: { isSubmitting } } = useForm();\n    const { signIn } = useEasybase();\n\n    const onSubmit = async (formData: Record<string, string>) => {\n        if (!formData.email || !formData.password) {\n            return;\n        }\n        \n        const signInRes = await signIn(formData.email, formData.password);\n        if (!signInRes.success) {\n            if (signInRes.errorCode === \"NoUserExists\") {\n                toast(dictionary.errorUserDoesNotExist!)\n            } else if (signInRes.errorCode === \"BadFormat\") {\n                reset();\n                toast(dictionary.errorBadInputFormat!)\n            }\n        }\n        // Will automatically change views\n    }\n\n    return (\n        <Form>\n            <HeaderText>{dictionary.signInHeader}</HeaderText>\n\n            <MainView>\n                <Controller\n                    control={control}\n                    render={({ field: { onChange, onBlur, value } }) => (\n                        <Input\n                            onBlur={onBlur}\n                            onChangeText={value => onChange(value)}\n                            value={value}\n                            placeholder={dictionary.emailLabel}\n                            editable={!isSubmitting}\n                            keyboardType=\"email-address\"\n                            returnKeyType=\"default\"\n                            autoCompleteType=\"email\"\n                            autoCapitalize=\"none\"\n                        />\n                    )}\n                    name=\"email\"\n                    defaultValue=\"\"\n                />\n                <SpacerXL />\n                <Controller\n                    control={control}\n                    render={({ field: { onChange, onBlur, value } }) => (\n                        <Input\n                            onBlur={onBlur}\n                            onChangeText={value => onChange(value)}\n                            value={value}\n                            placeholder={dictionary.passwordLabel}\n                            editable={!isSubmitting}\n                            returnKeyType=\"default\"\n                            secureTextEntry={true}\n                            autoCompleteType=\"password\"\n                            autoCapitalize=\"none\"\n                        />\n                    )}\n                    name=\"password\"\n                    defaultValue=\"\"\n                />\n                <ForgotPassword onPress={(_: any) => setCurrentPage(\"ForgotPassword\")} disabled={isSubmitting} title={dictionary.forgotPasswordButton!} />\n            </MainView>\n\n            <View>\n                <SubmitButton onPress={handleSubmit(onSubmit)} disabled={isSubmitting} title={dictionary.signInSubmitButton} />\n                <SpacerS />\n                <SecondaryButton onPress={(_: any) => setCurrentPage(\"SignUp\")} disabled={isSubmitting} title={dictionary.noAccountButton!} />\n            </View>\n        </Form>\n    )\n}\n"],"names":["useEasybase","require","setCurrentPage","dictionary","toast","control","handleSubmit","reset","formState","isSubmitting","useForm","signIn","onSubmit","formData","email","password","signInRes","success","errorCode","errorUserDoesNotExist","errorBadInputFormat","React","Form","HeaderText","signInHeader","MainView","Controller","render","field","onChange","onBlur","value","Input","onChangeText","placeholder","emailLabel","editable","keyboardType","returnKeyType","autoCompleteType","autoCapitalize","name","defaultValue","SpacerXL","passwordLabel","secureTextEntry","ForgotPassword","onPress","_","disabled","title","forgotPasswordButton","View","SubmitButton","signInSubmitButton","SpacerS","SecondaryButton","noAccountButton"],"mappings":";;;;AAKA,MAAM;AAAEA,EAAAA;AAAF,IAAkBC,OAAO,CAAC,gBAAD,CAA/B;;iBAEyB;AAAEC,EAAAA,cAAF;AAAkBC,EAAAA,UAAlB;AAA8BC,EAAAA;AAA9B;AACrB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,YAAX;AAAyBC,IAAAA,KAAzB;AAAgCC,IAAAA,SAAS,EAAE;AAAEC,MAAAA;AAAF;AAA3C,MAAgEC,OAAO,EAA7E;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAaX,WAAW,EAA9B;;AAEA,QAAMY,QAAQ,GAAG,MAAOC,QAAP;AACb,QAAI,CAACA,QAAQ,CAACC,KAAV,IAAmB,CAACD,QAAQ,CAACE,QAAjC,EAA2C;AACvC;AACH;;AAED,UAAMC,SAAS,GAAG,MAAML,MAAM,CAACE,QAAQ,CAACC,KAAV,EAAiBD,QAAQ,CAACE,QAA1B,CAA9B;;AACA,QAAI,CAACC,SAAS,CAACC,OAAf,EAAwB;AACpB,UAAID,SAAS,CAACE,SAAV,KAAwB,cAA5B,EAA4C;AACxCd,QAAAA,KAAK,CAACD,UAAU,CAACgB,qBAAZ,CAAL;AACH,OAFD,MAEO,IAAIH,SAAS,CAACE,SAAV,KAAwB,WAA5B,EAAyC;AAC5CX,QAAAA,KAAK;AACLH,QAAAA,KAAK,CAACD,UAAU,CAACiB,mBAAZ,CAAL;AACH;AACJ;;AAEJ,GAfD;;AAiBA,SACIC,4BAAA,CAACC,IAAD,MAAA,EACID,4BAAA,CAACE,UAAD,MAAA,EAAapB,UAAU,CAACqB,YAAxB,CADJ,EAGIH,4BAAA,CAACI,QAAD,MAAA,EACIJ,4BAAA,CAACK,UAAD;AACIrB,IAAAA,OAAO,EAAEA;AACTsB,IAAAA,MAAM,EAAE,CAAC;AAAEC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,QAAF;AAAYC,QAAAA,MAAZ;AAAoBC,QAAAA;AAApB;AAAT,KAAD,KACJV,4BAAA,CAACW,KAAD;AACIF,MAAAA,MAAM,EAAEA;AACRG,MAAAA,YAAY,EAAEF,KAAK,IAAIF,QAAQ,CAACE,KAAD;AAC/BA,MAAAA,KAAK,EAAEA;AACPG,MAAAA,WAAW,EAAE/B,UAAU,CAACgC;AACxBC,MAAAA,QAAQ,EAAE,CAAC3B;AACX4B,MAAAA,YAAY,EAAC;AACbC,MAAAA,aAAa,EAAC;AACdC,MAAAA,gBAAgB,EAAC;AACjBC,MAAAA,cAAc,EAAC;KATnB;AAYJC,IAAAA,IAAI,EAAC;AACLC,IAAAA,YAAY,EAAC;GAhBjB,CADJ,EAmBIrB,4BAAA,CAACsB,QAAD,MAAA,CAnBJ,EAoBItB,4BAAA,CAACK,UAAD;AACIrB,IAAAA,OAAO,EAAEA;AACTsB,IAAAA,MAAM,EAAE,CAAC;AAAEC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,QAAF;AAAYC,QAAAA,MAAZ;AAAoBC,QAAAA;AAApB;AAAT,KAAD,KACJV,4BAAA,CAACW,KAAD;AACIF,MAAAA,MAAM,EAAEA;AACRG,MAAAA,YAAY,EAAEF,KAAK,IAAIF,QAAQ,CAACE,KAAD;AAC/BA,MAAAA,KAAK,EAAEA;AACPG,MAAAA,WAAW,EAAE/B,UAAU,CAACyC;AACxBR,MAAAA,QAAQ,EAAE,CAAC3B;AACX6B,MAAAA,aAAa,EAAC;AACdO,MAAAA,eAAe,EAAE;AACjBN,MAAAA,gBAAgB,EAAC;AACjBC,MAAAA,cAAc,EAAC;KATnB;AAYJC,IAAAA,IAAI,EAAC;AACLC,IAAAA,YAAY,EAAC;GAhBjB,CApBJ,EAsCIrB,4BAAA,CAACyB,cAAD;AAAgBC,IAAAA,OAAO,EAAGC,CAAD,IAAY9C,cAAc,CAAC,gBAAD;AAAoB+C,IAAAA,QAAQ,EAAExC;AAAcyC,IAAAA,KAAK,EAAE/C,UAAU,CAACgD;GAAjH,CAtCJ,CAHJ,EA4CI9B,4BAAA,CAAC+B,IAAD,MAAA,EACI/B,4BAAA,CAACgC,YAAD;AAAcN,IAAAA,OAAO,EAAEzC,YAAY,CAACM,QAAD;AAAYqC,IAAAA,QAAQ,EAAExC;AAAcyC,IAAAA,KAAK,EAAE/C,UAAU,CAACmD;GAAzF,CADJ,EAEIjC,4BAAA,CAACkC,OAAD,MAAA,CAFJ,EAGIlC,4BAAA,CAACmC,eAAD;AAAiBT,IAAAA,OAAO,EAAGC,CAAD,IAAY9C,cAAc,CAAC,QAAD;AAAY+C,IAAAA,QAAQ,EAAExC;AAAcyC,IAAAA,KAAK,EAAE/C,UAAU,CAACsD;GAA1G,CAHJ,CA5CJ,CADJ;AAoDH;;;;"}