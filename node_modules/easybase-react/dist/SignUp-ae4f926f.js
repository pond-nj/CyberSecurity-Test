var React = require('react');
var index_esm = require('./index.esm-264e892f.js');
var NativeAuth = require('./NativeAuth-528322b5.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var _require = require('easybase-react'),
    useEasybase = _require.useEasybase;

function SignUp (_ref) {
  var _errors$firstName, _errors$lastName, _errors$fullName, _errors$gender, _errors$phoneNumber, _errors$password, _errors$passwordConfi;

  var setCurrentPage = _ref.setCurrentPage,
      dictionary = _ref.dictionary,
      signUpFields = _ref.signUpFields,
      toast = _ref.toast;

  var _useForm = index_esm.useForm(),
      control = _useForm.control,
      handleSubmit = _useForm.handleSubmit,
      _useForm$formState = _useForm.formState,
      errors = _useForm$formState.errors,
      isSubmitting = _useForm$formState.isSubmitting,
      reset = _useForm.reset;

  var _useEasybase = useEasybase(),
      signUp = _useEasybase.signUp,
      signIn = _useEasybase.signIn;

  var onSubmit = function onSubmit(formData) {
    try {
      if (!formData.email || !formData.password || !formData.passwordConfirm) {
        return Promise.resolve();
      }

      if (formData.password !== formData.passwordConfirm) {
        toast(dictionary.errorPasswordsDoNotMatch);
        reset();
        return Promise.resolve();
      }

      var signUpAttrs = {
        createdAt: new Date().toISOString()
      };

      for (var _i = 0, _arr = ["firstName", "lastName", "fullName", "dateOfBirth", "gender", "phoneNumber"]; _i < _arr.length; _i++) {
        var currField = _arr[_i];

        if (signUpFields[currField]) {
          if (formData[currField]) {
            signUpAttrs[currField] = "" + formData[currField];
          } else {
            toast("Missing sign up field value");
            return Promise.resolve();
          }
        }
      }

      return Promise.resolve(signUp(formData.email, formData.password, signUpAttrs)).then(function (signUpRes) {
        var _temp = function () {
          if (signUpRes.success) {
            setCurrentPage("SignIn");
            return Promise.resolve(signIn(formData.email, formData.password)).then(function () {});
          } else {
            if (signUpRes.errorCode === "BadFormat") {
              reset();
              toast(dictionary.errorBadInputFormat);
            } else if (signUpRes.errorCode === "BadPasswordLength") {
              toast(dictionary.errorPasswordTooShort);
            } else if (signUpRes.errorCode === "UserExists") {
              reset();
              toast(dictionary.errorUserAlreadyExists);
            }
          }
        }();

        if (_temp && _temp.then) return _temp.then(function () {});
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  var passwordReqs = {
    minLength: {
      value: 8,
      message: "Password must be at least 8 characters long"
    },
    maxLength: {
      value: 100,
      message: "Password too long"
    },
    pattern: {
      value: /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{7,}$/gm,
      message: "Must contain a digit and uppercase and lowercase letters"
    }
  };
  return React__default["default"].createElement(NativeAuth.Form, null, React__default["default"].createElement(NativeAuth.HeaderText, null, dictionary.signUpHeader), React__default["default"].createElement(NativeAuth.MainView, null, React__default["default"].createElement(index_esm.Controller, {
    control: control,
    render: function render(_ref2) {
      var _ref2$field = _ref2.field,
          onChange = _ref2$field.onChange,
          onBlur = _ref2$field.onBlur,
          value = _ref2$field.value;
      return React__default["default"].createElement(NativeAuth.Input, {
        onBlur: onBlur,
        onChangeText: function onChangeText(value) {
          return onChange(value);
        },
        value: value,
        placeholder: dictionary.newEmailLabel,
        editable: !isSubmitting,
        keyboardType: "email-address",
        returnKeyType: "default",
        autoCompleteType: "email",
        autoCapitalize: "none"
      });
    },
    name: "email",
    defaultValue: ""
  }), signUpFields.firstName && React__default["default"].createElement(React.Fragment, null, React__default["default"].createElement(NativeAuth.SpacerXL, null), React__default["default"].createElement(index_esm.Controller, {
    control: control,
    render: function render(_ref3) {
      var _ref3$field = _ref3.field,
          onChange = _ref3$field.onChange,
          onBlur = _ref3$field.onBlur,
          value = _ref3$field.value;
      return React__default["default"].createElement(NativeAuth.Input, {
        onBlur: onBlur,
        onChangeText: function onChangeText(value) {
          return onChange(value);
        },
        value: value,
        placeholder: dictionary.newFirstNameLabel,
        editable: !isSubmitting,
        returnKeyType: "default",
        autoCompleteType: "name",
        autoCapitalize: "words"
      });
    },
    name: "firstName",
    defaultValue: "",
    rules: typeof signUpFields.firstName === "boolean" ? {} : signUpFields.firstName
  }), React__default["default"].createElement(NativeAuth.ErrorText, {
    value: (_errors$firstName = errors.firstName) == null ? void 0 : _errors$firstName.message
  })), signUpFields.lastName && React__default["default"].createElement(React.Fragment, null, React__default["default"].createElement(NativeAuth.SpacerXL, null), React__default["default"].createElement(index_esm.Controller, {
    control: control,
    render: function render(_ref4) {
      var _ref4$field = _ref4.field,
          onChange = _ref4$field.onChange,
          onBlur = _ref4$field.onBlur,
          value = _ref4$field.value;
      return React__default["default"].createElement(NativeAuth.Input, {
        onBlur: onBlur,
        onChangeText: function onChangeText(value) {
          return onChange(value);
        },
        value: value,
        placeholder: dictionary.newLastNameLabel,
        editable: !isSubmitting,
        returnKeyType: "default",
        autoCompleteType: "name",
        autoCapitalize: "words"
      });
    },
    name: "lastName",
    defaultValue: "",
    rules: typeof signUpFields.lastName === "boolean" ? {} : signUpFields.lastName
  }), React__default["default"].createElement(NativeAuth.ErrorText, {
    value: (_errors$lastName = errors.lastName) == null ? void 0 : _errors$lastName.message
  })), signUpFields.fullName && React__default["default"].createElement(React.Fragment, null, React__default["default"].createElement(NativeAuth.SpacerXL, null), React__default["default"].createElement(index_esm.Controller, {
    control: control,
    render: function render(_ref5) {
      var _ref5$field = _ref5.field,
          onChange = _ref5$field.onChange,
          onBlur = _ref5$field.onBlur,
          value = _ref5$field.value;
      return React__default["default"].createElement(NativeAuth.Input, {
        onBlur: onBlur,
        onChangeText: function onChangeText(value) {
          return onChange(value);
        },
        value: value,
        placeholder: dictionary.newFullNameLabel,
        editable: !isSubmitting,
        returnKeyType: "default",
        autoCompleteType: "name",
        autoCapitalize: "words"
      });
    },
    name: "fullName",
    defaultValue: "",
    rules: typeof signUpFields.fullName === "boolean" ? {} : signUpFields.fullName
  }), React__default["default"].createElement(NativeAuth.ErrorText, {
    value: (_errors$fullName = errors.fullName) == null ? void 0 : _errors$fullName.message
  })), signUpFields.gender && React__default["default"].createElement(React.Fragment, null, React__default["default"].createElement(NativeAuth.SpacerXL, null), React__default["default"].createElement(index_esm.Controller, {
    control: control,
    render: function render(_ref6) {
      var _ref6$field = _ref6.field,
          onChange = _ref6$field.onChange,
          value = _ref6$field.value;
      return React__default["default"].createElement(NativeAuth.Picker, {
        onValueChange: function onValueChange(value) {
          return onChange(value);
        },
        selectedValue: value,
        enabled: !isSubmitting,
        mode: "dialog"
      }, ["Male", "Female", "Prefer not to say"].map(function (e) {
        return React__default["default"].createElement(NativeAuth.Picker.Item, {
          label: e,
          value: e
        });
      }));
    },
    name: "gender",
    defaultValue: "",
    rules: typeof signUpFields.gender === "boolean" ? {} : signUpFields.gender
  }), React__default["default"].createElement(NativeAuth.ErrorText, {
    value: (_errors$gender = errors.gender) == null ? void 0 : _errors$gender.message
  })), signUpFields.phoneNumber && React__default["default"].createElement(React.Fragment, null, React__default["default"].createElement(NativeAuth.SpacerXL, null), React__default["default"].createElement(index_esm.Controller, {
    control: control,
    render: function render(_ref7) {
      var _ref7$field = _ref7.field,
          onChange = _ref7$field.onChange,
          onBlur = _ref7$field.onBlur,
          value = _ref7$field.value;
      return React__default["default"].createElement(NativeAuth.Input, {
        onBlur: onBlur,
        onChangeText: function onChangeText(value) {
          return onChange(value);
        },
        value: value,
        placeholder: dictionary.newPhoneNumberLabel,
        editable: !isSubmitting,
        returnKeyType: "default",
        keyboardType: "number-pad"
      });
    },
    name: "phoneNumber",
    defaultValue: "",
    rules: typeof signUpFields.phoneNumber === "boolean" ? {} : signUpFields.phoneNumber
  }), React__default["default"].createElement(NativeAuth.ErrorText, {
    value: (_errors$phoneNumber = errors.phoneNumber) == null ? void 0 : _errors$phoneNumber.message
  })), React__default["default"].createElement(NativeAuth.SpacerXL, null), React__default["default"].createElement(index_esm.Controller, {
    control: control,
    render: function render(_ref8) {
      var _ref8$field = _ref8.field,
          onChange = _ref8$field.onChange,
          onBlur = _ref8$field.onBlur,
          value = _ref8$field.value;
      return React__default["default"].createElement(NativeAuth.Input, {
        onBlur: onBlur,
        onChangeText: function onChangeText(value) {
          return onChange(value);
        },
        value: value,
        placeholder: dictionary.newPasswordLabel,
        editable: !isSubmitting,
        returnKeyType: "default",
        secureTextEntry: true,
        autoCompleteType: "password",
        autoCapitalize: "none"
      });
    },
    name: "password",
    defaultValue: "",
    rules: passwordReqs
  }), React__default["default"].createElement(NativeAuth.ErrorText, {
    value: (_errors$password = errors.password) == null ? void 0 : _errors$password.message
  }), React__default["default"].createElement(NativeAuth.SpacerXL, null), React__default["default"].createElement(index_esm.Controller, {
    control: control,
    render: function render(_ref9) {
      var _ref9$field = _ref9.field,
          onChange = _ref9$field.onChange,
          onBlur = _ref9$field.onBlur,
          value = _ref9$field.value;
      return React__default["default"].createElement(NativeAuth.Input, {
        onBlur: onBlur,
        onChangeText: function onChangeText(value) {
          return onChange(value);
        },
        value: value,
        placeholder: dictionary.confirmNewPasswordLabel,
        editable: !isSubmitting,
        returnKeyType: "default",
        secureTextEntry: true,
        autoCompleteType: "password",
        autoCapitalize: "none"
      });
    },
    name: "passwordConfirm",
    defaultValue: "",
    rules: passwordReqs
  }), React__default["default"].createElement(NativeAuth.ErrorText, {
    value: (_errors$passwordConfi = errors.passwordConfirm) == null ? void 0 : _errors$passwordConfi.message
  })), React__default["default"].createElement(NativeAuth.View, null, React__default["default"].createElement(NativeAuth.SubmitButton, {
    onPress: handleSubmit(onSubmit),
    disabled: isSubmitting,
    title: dictionary.signUpSubmitButton
  }), React__default["default"].createElement(NativeAuth.SpacerS, null), React__default["default"].createElement(NativeAuth.SecondaryButton, {
    onPress: function onPress(_) {
      return setCurrentPage("SignIn");
    },
    disabled: isSubmitting,
    title: dictionary.backToSignIn
  })));
}

exports["default"] = SignUp;
//# sourceMappingURL=SignUp-ae4f926f.js.map
