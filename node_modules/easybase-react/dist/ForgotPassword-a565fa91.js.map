{"version":3,"file":"ForgotPassword-a565fa91.js","sources":["../src/ui/NativeAuth/pages/ForgotPassword.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { INativePage } from '../../uiTypes';\nimport { Form, HeaderText, View, Input, SpacerXL, SubmitButton, SpacerS, SecondaryButton, ErrorText, SecondaryText, MainView, NoSecondaryButton } from '../components';\n\nconst { useEasybase } = require('easybase-react');\n\nexport default function ({ setCurrentPage, dictionary, toast, emailTemplate }: INativePage) {\n    const [onConfirm, setOnConfirm] = useState<boolean>(false);\n    const [forgottenUsername, setForgottenUsername] = useState<string | undefined>();\n    const { control, handleSubmit, reset, formState: { isSubmitting, errors } } = useForm();\n    const { forgotPassword, forgotPasswordConfirm } = useEasybase();\n\n    const onSubmit = async (formData: Record<string, string>) => {\n        if (!formData.email) {\n            return;\n        }\n\n        const forgotRes = await forgotPassword(formData.email, emailTemplate);\n        if (forgotRes.success) {\n            setForgottenUsername(formData.email);\n            setOnConfirm(true);\n            toast('Check your email for a verification code')\n        } else {\n            if (forgotRes.errorCode === \"RequestLimitExceeded\") {\n                toast(dictionary.errorRequestLimitExceeded!);\n            } else if (forgotRes.errorCode === \"BadFormat\") {\n                reset();\n                toast(dictionary.errorBadInputFormat!);\n            } else if (forgotRes.errorCode === \"NoUserExists\") {\n                reset();\n                toast(dictionary.errorNoAccountFound!);\n            } else {\n                reset();\n                toast('Bad request');\n            }\n        }\n    }\n\n    const onConfirmSubmit = async (formData: Record<string, string>) => {\n        if (!formData.code || !formData.newPassword || !forgottenUsername) {\n            return;\n        }\n        const forgotConfirmRes = await forgotPasswordConfirm(formData.code, forgottenUsername, formData.newPassword)\n        if (forgotConfirmRes.success) {\n            setOnConfirm(false);\n            setForgottenUsername(\"\");\n            setCurrentPage('SignIn');\n            toast('Password successfully changed')\n        } else {\n            if (forgotConfirmRes.errorCode === \"BadPasswordLength\") {\n                toast(dictionary.errorPasswordTooShort!);\n            } else if (forgotConfirmRes.errorCode === \"BadFormat\") {\n                reset();\n                toast(dictionary.errorBadInputFormat!);\n            } else if (forgotConfirmRes.errorCode === \"NoUserExists\") {\n                reset();\n                toast(dictionary.errorNoAccountFound!);\n            } else if (forgotConfirmRes.errorCode === \"WrongVerificationCode\") {\n                toast(dictionary.errorWrongVerificationCode!);\n            } else {\n                toast('Bad request');\n            }\n        }\n    }\n\n    const passwordReqs = {\n        minLength: {\n            value: 8,\n            message: \"Password must be at least 8 characters long\"\n        },\n        maxLength: {\n            value: 100,\n            message: \"Password too long\"\n        },\n        pattern: {\n            value: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{7,}$/gm,\n            message: \"Must contain a digit and uppercase and lowercase letters\"\n        }\n    }\n\n    const codeReqs = {\n        minLength: {\n            value: 8,\n            message: \"Incorrect code length\"\n        }\n    }\n\n    if (!onConfirm) {\n        return (\n            <Form>\n                <HeaderText>{dictionary.forgotPasswordHeader}</HeaderText>\n\n                <MainView>\n                    <SecondaryText>{dictionary.forgotPasswordSecondaryHeader}</SecondaryText>\n                    <SpacerXL />\n                    <Controller\n                        control={control}\n                        render={({ field: { onChange, onBlur, value } }) => (\n                            <Input\n                                onBlur={onBlur}\n                                onChangeText={value => onChange(value)}\n                                value={value}\n                                placeholder={dictionary.newEmailLabel}\n                                editable={!isSubmitting}\n                                keyboardType=\"email-address\"\n                                returnKeyType=\"default\"\n                                autoCompleteType=\"email\"\n                                autoCapitalize=\"none\"\n                            />\n                        )}\n                        name=\"email\"\n                        defaultValue=\"\"\n                    />\n                </MainView>\n\n                <View>\n                    <SubmitButton onPress={handleSubmit(onSubmit)} disabled={isSubmitting} title={dictionary.forgotPasswordSubmitButton} />\n                    <SpacerS />\n                    <SecondaryButton onPress={(_: any) => setCurrentPage(\"SignIn\")} disabled={isSubmitting} title={dictionary.backToSignIn} />\n                </View>\n            </Form>\n        )\n    } else {\n        return (\n            <Form>\n                <HeaderText>{dictionary.forgotPasswordConfirmHeader}</HeaderText>\n\n                <MainView>\n                    <Controller\n                        control={control}\n                        render={({ field: { onChange, onBlur, value } }) => (\n                            <Input\n                                onBlur={onBlur}\n                                onChangeText={value => onChange(value)}\n                                value={value}\n                                placeholder={dictionary.codeLabel}\n                                editable={!isSubmitting}\n                                returnKeyType=\"default\"\n                                autoCapitalize=\"characters\"\n                            />\n                        )}\n                        name=\"code\"\n                        defaultValue=\"\"\n                        rules={codeReqs}\n                    />\n                    <ErrorText value={errors.code?.message} />\n                    <SpacerXL />\n                    <Controller\n                        control={control}\n                        render={({ field: { onChange, onBlur, value } }) => (\n                            <Input\n                                onBlur={onBlur}\n                                onChangeText={value => onChange(value)}\n                                value={value}\n                                placeholder={dictionary.forgotPasswordConfirmLabel}\n                                editable={!isSubmitting}\n                                returnKeyType=\"default\"\n                                secureTextEntry={true}\n                                autoCompleteType=\"password\"\n                                autoCapitalize=\"none\"\n                            />\n                        )}\n                        name=\"newPassword\"\n                        defaultValue=\"\"\n                        rules={passwordReqs}\n                    />\n                    <ErrorText value={errors.newPassword?.message} />\n                </MainView>\n                \n                <View>\n                    <SubmitButton onPress={handleSubmit(onConfirmSubmit)} disabled={isSubmitting} title={dictionary.forgotPasswordConfirmSubmitButton} />\n                    <SpacerS />\n                    <NoSecondaryButton />\n                </View>\n            </Form>\n        )\n    }\n}\n"],"names":["useEasybase","require","setCurrentPage","dictionary","toast","emailTemplate","onConfirm","setOnConfirm","useState","forgottenUsername","setForgottenUsername","control","handleSubmit","reset","formState","isSubmitting","errors","useForm","forgotPassword","forgotPasswordConfirm","onSubmit","formData","email","forgotRes","success","errorCode","errorRequestLimitExceeded","errorBadInputFormat","errorNoAccountFound","onConfirmSubmit","code","newPassword","forgotConfirmRes","errorPasswordTooShort","errorWrongVerificationCode","passwordReqs","minLength","value","message","maxLength","pattern","codeReqs","React","Form","HeaderText","forgotPasswordHeader","MainView","SecondaryText","forgotPasswordSecondaryHeader","SpacerXL","Controller","render","field","onChange","onBlur","Input","onChangeText","placeholder","newEmailLabel","editable","keyboardType","returnKeyType","autoCompleteType","autoCapitalize","name","defaultValue","View","SubmitButton","onPress","disabled","title","forgotPasswordSubmitButton","SpacerS","SecondaryButton","_","backToSignIn","forgotPasswordConfirmHeader","codeLabel","rules","ErrorText","forgotPasswordConfirmLabel","secureTextEntry","forgotPasswordConfirmSubmitButton","NoSecondaryButton"],"mappings":"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"}