var React = require('react');
var index_esm = require('./index.esm-f4de5e43.js');
var ErrorText = require('./ErrorText-cd09e474.js');
var index = require('./index-04d24c4d.js');
var Auth = require('./Auth-dec80812.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var SelectContainer = Auth.styled.div({
  position: 'relative',
  display: 'inline',
  width: '100%',
  maxWidth: '100%',
  cursor: 'pointer',
  '&:after': {
    content: "''",
    width: 0,
    height: 0,
    position: 'absolute',
    pointerEvents: 'none',
    top: '.3em',
    right: '.75em',
    borderTop: '8px solid black',
    opacity: 0.5,
    borderLeft: '5px solid transparent',
    borderRight: '5px solid transparent'
  }
});
var Select = Auth.styled.select({
  WebkitAppearance: 'none',
  MozAppearance: 'none',
  appearance: 'none',
  padding: '1em 2em 1em 1em',
  border: 'none',
  width: '100%',
  fontFamily: 'inherit',
  fontSize: 'inherit',
  cursor: 'pointer',
  outline: 'none',
  '&::-ms-expand': {
    display: 'none'
  }
});
var SelectOption = Auth.styled.option(function (props) {
  return index._extends({
    width: '100%'
  }, props.theme.selectOption ? index._extends({}, props.theme.selectOption) : {});
});
function Select$1 (props) {
  return React__default["default"].createElement(SelectContainer, null, React__default["default"].createElement(Select, Object.assign({}, props, props.register(), {
    defaultValue: ""
  }), React__default["default"].createElement(SelectOption, {
    key: "empty-option",
    value: "",
    disabled: true,
    hidden: true,
    style: {
      display: 'none'
    }
  }), props.options.map(function (e) {
    return React__default["default"].createElement(SelectOption, {
      key: "option" + e
    }, e);
  })));
}

var GenderSelect = Auth.styled(Select$1)(function (props) {
  return index._extends({
    boxSizing: "border-box"
  }, props.theme.genderSelect ? index._extends({}, props.theme.genderSelect) : {});
});
var Root = Auth.styled.div({
  position: "relative"
});
var GenderLabel = Auth.styled(index_esm.Label)(function (props) {
  return index._extends({}, props.theme.genderSelectLabel ? index._extends({}, props.theme.genderSelectLabel) : {});
});
function GenderSelect$1 (props) {
  return React__default["default"].createElement(Root, null, React__default["default"].createElement(GenderLabel, {
    htmlFor: "select-gender"
  }, "Gender *"), React__default["default"].createElement(GenderSelect, Object.assign({
    id: "select-gender"
  }, props, {
    options: ["Male", "Female", "Prefer not to say"]
  })));
}

function SignUp (_ref) {
  var _errors$firstName, _errors$lastName, _errors$fullName, _errors$dateOfBirth, _errors$gender, _errors$phoneNumber, _errors$password, _errors$passwordConfi;

  var setCurrentPage = _ref.setCurrentPage,
      dictionary = _ref.dictionary,
      signUpFields = _ref.signUpFields;

  var _useForm = index_esm.useForm(),
      _register = _useForm.register,
      handleSubmit = _useForm.handleSubmit,
      _useForm$formState = _useForm.formState,
      errors = _useForm$formState.errors,
      isSubmitting = _useForm$formState.isSubmitting,
      reset = _useForm.reset;

  var _useEasybase = index.useEasybase(),
      signUp = _useEasybase.signUp,
      signIn = _useEasybase.signIn;

  var onSubmit = function onSubmit(formData) {
    try {
      if (!formData.email || !formData.password || !formData.passwordConfirm) {
        return Promise.resolve();
      }

      if (formData.password !== formData.passwordConfirm) {
        Auth.toast.error(dictionary.errorPasswordsDoNotMatch);
        reset();
        return Promise.resolve();
      }

      var signUpAttrs = {
        createdAt: new Date().toISOString()
      };

      for (var _i = 0, _arr = ["firstName", "lastName", "fullName", "dateOfBirth", "gender", "phoneNumber"]; _i < _arr.length; _i++) {
        var currField = _arr[_i];

        if (signUpFields[currField]) {
          if (formData[currField]) {
            signUpAttrs[currField] = "" + formData[currField];
          } else {
            Auth.toast.error("Missing sign up field value");
            return Promise.resolve();
          }
        }
      }

      return Promise.resolve(signUp(formData.email, formData.password, signUpAttrs)).then(function (signUpRes) {
        var _temp = function () {
          if (signUpRes.success) {
            setCurrentPage("SignIn");
            return Promise.resolve(signIn(formData.email, formData.password)).then(function () {});
          } else {
            if (signUpRes.errorCode === "BadFormat") {
              reset();
              Auth.toast.error(dictionary.errorBadInputFormat);
            } else if (signUpRes.errorCode === "BadPasswordLength") {
              Auth.toast.error(dictionary.errorPasswordTooShort);
            } else if (signUpRes.errorCode === "UserExists") {
              reset();
              Auth.toast.error(dictionary.errorUserAlreadyExists);
            }
          }
        }();

        if (_temp && _temp.then) return _temp.then(function () {});
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  var passwordReqs = {
    minLength: {
      value: 8,
      message: "Password must be at least 8 characters long"
    },
    maxLength: {
      value: 100,
      message: "Password too long"
    },
    pattern: {
      value: /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{7,}$/gm,
      message: "Must contain a digit and uppercase and lowercase letters"
    }
  };
  return React__default["default"].createElement(index_esm.Form, {
    onSubmit: handleSubmit(onSubmit)
  }, React__default["default"].createElement(index_esm.HeaderText, null, dictionary.signUpHeader), React__default["default"].createElement(index_esm.Spacer, {
    size: "medium"
  }), React__default["default"].createElement(index_esm.EmailInput, {
    register: function register() {
      return _register("email");
    },
    label: dictionary.newEmailLabel,
    disabled: isSubmitting
  }), signUpFields.firstName && React__default["default"].createElement(React.Fragment, null, React__default["default"].createElement(index_esm.Spacer, {
    size: "xlarge"
  }), React__default["default"].createElement(index_esm.Input, {
    register: function register() {
      return _register("firstName", typeof signUpFields.firstName === "boolean" ? {} : signUpFields.firstName);
    },
    label: dictionary.newFirstNameLabel || "",
    disabled: isSubmitting
  }), React__default["default"].createElement(ErrorText.ErrorText, {
    value: (_errors$firstName = errors.firstName) == null ? void 0 : _errors$firstName.message
  })), signUpFields.lastName && React__default["default"].createElement(React.Fragment, null, React__default["default"].createElement(index_esm.Spacer, {
    size: "xlarge"
  }), React__default["default"].createElement(index_esm.Input, {
    register: function register() {
      return _register("lastName", typeof signUpFields.lastName === "boolean" ? {} : signUpFields.lastName);
    },
    label: dictionary.newLastNameLabel || "",
    disabled: isSubmitting
  }), React__default["default"].createElement(ErrorText.ErrorText, {
    value: (_errors$lastName = errors.lastName) == null ? void 0 : _errors$lastName.message
  })), signUpFields.fullName && React__default["default"].createElement(React.Fragment, null, React__default["default"].createElement(index_esm.Spacer, {
    size: "xlarge"
  }), React__default["default"].createElement(index_esm.Input, {
    register: function register() {
      return _register("fullName", typeof signUpFields.fullName === "boolean" ? {} : signUpFields.fullName);
    },
    label: dictionary.newFullNameLabel || "",
    disabled: isSubmitting
  }), React__default["default"].createElement(ErrorText.ErrorText, {
    value: (_errors$fullName = errors.fullName) == null ? void 0 : _errors$fullName.message
  })), signUpFields.dateOfBirth && React__default["default"].createElement(React.Fragment, null, React__default["default"].createElement(index_esm.Spacer, {
    size: "xlarge"
  }), React__default["default"].createElement(index_esm.Input, {
    type: "date",
    register: function register() {
      return _register("dateOfBirth", typeof signUpFields.dateOfBirth === "boolean" ? {} : signUpFields.dateOfBirth);
    },
    label: dictionary.newDateOfBirthLabel || "",
    disabled: isSubmitting,
    style: {
      overflow: "hidden"
    }
  }), React__default["default"].createElement(ErrorText.ErrorText, {
    value: (_errors$dateOfBirth = errors.dateOfBirth) == null ? void 0 : _errors$dateOfBirth.message
  })), signUpFields.gender && React__default["default"].createElement(React.Fragment, null, React__default["default"].createElement(index_esm.Spacer, {
    size: "xlarge"
  }), React__default["default"].createElement(GenderSelect$1, {
    register: function register() {
      return _register("gender", typeof signUpFields.gender === "boolean" ? {} : signUpFields.gender);
    },
    disabled: isSubmitting
  }), React__default["default"].createElement(ErrorText.ErrorText, {
    value: (_errors$gender = errors.gender) == null ? void 0 : _errors$gender.message
  })), signUpFields.phoneNumber && React__default["default"].createElement(React.Fragment, null, React__default["default"].createElement(index_esm.Spacer, {
    size: "xlarge"
  }), React__default["default"].createElement(index_esm.Input, {
    type: "tel",
    label: dictionary.newPhoneNumberLabel || "",
    register: function register() {
      return _register("phoneNumber", typeof signUpFields.phoneNumber === "boolean" ? {} : signUpFields.phoneNumber);
    },
    disabled: isSubmitting
  }), React__default["default"].createElement(ErrorText.ErrorText, {
    value: (_errors$phoneNumber = errors.phoneNumber) == null ? void 0 : _errors$phoneNumber.message
  })), React__default["default"].createElement(index_esm.Spacer, {
    size: "xlarge"
  }), React__default["default"].createElement(index_esm.PasswordInput, {
    register: function register() {
      return _register("password", passwordReqs);
    },
    label: dictionary.newPasswordLabel,
    autoComplete: "new-password",
    disabled: isSubmitting
  }), React__default["default"].createElement(ErrorText.ErrorText, {
    value: (_errors$password = errors.password) == null ? void 0 : _errors$password.message
  }), React__default["default"].createElement(index_esm.Spacer, {
    size: "xlarge"
  }), React__default["default"].createElement(index_esm.PasswordInput, {
    register: function register() {
      return _register("passwordConfirm", passwordReqs);
    },
    label: dictionary.confirmNewPasswordLabel,
    autoComplete: "new-password",
    disabled: isSubmitting
  }), React__default["default"].createElement(ErrorText.ErrorText, {
    value: (_errors$passwordConfi = errors.passwordConfirm) == null ? void 0 : _errors$passwordConfi.message
  }), React__default["default"].createElement(index_esm.Spacer, {
    size: "xlarge"
  }), React__default["default"].createElement(index_esm.SubmitButton, {
    disabled: isSubmitting
  }, dictionary.signUpSubmitButton), React__default["default"].createElement(index_esm.SecondaryButton, {
    onClick: function onClick(_) {
      return setCurrentPage("SignIn");
    },
    disabled: isSubmitting
  }, dictionary.backToSignIn));
}

exports["default"] = SignUp;
//# sourceMappingURL=SignUp-3f867ad4.js.map
