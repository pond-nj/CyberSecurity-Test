{"version":3,"file":"SignUp-ae4f926f.js","sources":["../src/ui/NativeAuth/pages/SignUp.tsx"],"sourcesContent":["import React, { Fragment } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { INativePage, ISignUpFields } from '../../uiTypes';\nimport { Form, HeaderText, View, Input, SpacerXL, SubmitButton, SpacerS, SecondaryButton, ErrorText, Picker, MainView } from '../components';\n\nconst { useEasybase } = require('easybase-react');\n\ninterface ISignUpPage extends INativePage {\n    signUpFields: ISignUpFields\n}\n\nexport default function ({ setCurrentPage, dictionary, signUpFields, toast }: ISignUpPage) {\n    const { control, handleSubmit, formState: { errors, isSubmitting }, reset } = useForm();\n    const { signUp, signIn } = useEasybase();\n\n    const onSubmit = async (formData: Record<string, string>) => {\n        if (!formData.email || !formData.password || !formData.passwordConfirm) {\n            return;\n        }\n        if (formData.password !== formData.passwordConfirm) {\n            toast(dictionary.errorPasswordsDoNotMatch!);\n            reset();\n            return;\n        }\n\n        const signUpAttrs = { createdAt: new Date().toISOString() };\n        for (const currField of [\"firstName\", \"lastName\", \"fullName\", \"dateOfBirth\", \"gender\", \"phoneNumber\"]) {\n            if (signUpFields[currField]) {\n                if (formData[currField]) {\n                    signUpAttrs[currField] = \"\" + formData[currField];\n                } else {\n                    toast(\"Missing sign up field value\");\n                    return;\n                }\n            }\n        }\n\n        const signUpRes = await signUp(formData.email, formData.password, signUpAttrs);\n        if (signUpRes.success) {\n            setCurrentPage(\"SignIn\")\n            await signIn(formData.email, formData.password)\n        } else {\n            if (signUpRes.errorCode === \"BadFormat\") {\n                reset();\n                toast(dictionary.errorBadInputFormat!);\n            } else if (signUpRes.errorCode === \"BadPasswordLength\") {\n                toast(dictionary.errorPasswordTooShort!);\n            } else if (signUpRes.errorCode === \"UserExists\") {\n                reset();\n                toast(dictionary.errorUserAlreadyExists!);\n            }\n        }\n    }\n\n    const passwordReqs = {\n        minLength: {\n            value: 8,\n            message: \"Password must be at least 8 characters long\"\n        },\n        maxLength: {\n            value: 100,\n            message: \"Password too long\"\n        },\n        pattern: {\n            value: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{7,}$/gm,\n            message: \"Must contain a digit and uppercase and lowercase letters\"\n        }\n    }\n\n    return (\n        <Form>\n            <HeaderText>{dictionary.signUpHeader}</HeaderText>\n\n            <MainView>\n                <Controller\n                    control={control}\n                    render={({ field: { onChange, onBlur, value } }) => (\n                        <Input\n                            onBlur={onBlur}\n                            onChangeText={value => onChange(value)}\n                            value={value}\n                            placeholder={dictionary.newEmailLabel}\n                            editable={!isSubmitting}\n                            keyboardType=\"email-address\"\n                            returnKeyType=\"default\"\n                            autoCompleteType=\"email\"\n                            autoCapitalize=\"none\"\n                        />\n                    )}\n                    name=\"email\"\n                    defaultValue=\"\"\n                />\n\n                {signUpFields.firstName &&\n                    <Fragment>\n                        <SpacerXL />\n                        <Controller\n                            control={control}\n                            render={({ field: { onChange, onBlur, value } }) => (\n                                <Input\n                                    onBlur={onBlur}\n                                    onChangeText={value => onChange(value)}\n                                    value={value}\n                                    placeholder={dictionary.newFirstNameLabel}\n                                    editable={!isSubmitting}\n                                    returnKeyType=\"default\"\n                                    autoCompleteType=\"name\"\n                                    autoCapitalize=\"words\"\n                                />\n                            )}\n                            name=\"firstName\"\n                            defaultValue=\"\"\n                            rules={typeof signUpFields.firstName === \"boolean\" ? {} : signUpFields.firstName}\n                        />\n                        <ErrorText value={errors.firstName?.message} />\n                    </Fragment>\n                }\n\n                {signUpFields.lastName &&\n                    <Fragment>\n                        <SpacerXL />\n                        <Controller\n                            control={control}\n                            render={({ field: { onChange, onBlur, value } }) => (\n                                <Input\n                                    onBlur={onBlur}\n                                    onChangeText={value => onChange(value)}\n                                    value={value}\n                                    placeholder={dictionary.newLastNameLabel}\n                                    editable={!isSubmitting}\n                                    returnKeyType=\"default\"\n                                    autoCompleteType=\"name\"\n                                    autoCapitalize=\"words\"\n                                />\n                            )}\n                            name=\"lastName\"\n                            defaultValue=\"\"\n                            rules={typeof signUpFields.lastName === \"boolean\" ? {} : signUpFields.lastName}\n                        />\n                        <ErrorText value={errors.lastName?.message} />\n                    </Fragment>\n                }\n\n                {signUpFields.fullName &&\n                    <Fragment>\n                        <SpacerXL />\n                        <Controller\n                            control={control}\n                            render={({ field: { onChange, onBlur, value } }) => (\n                                <Input\n                                    onBlur={onBlur}\n                                    onChangeText={value => onChange(value)}\n                                    value={value}\n                                    placeholder={dictionary.newFullNameLabel}\n                                    editable={!isSubmitting}\n                                    returnKeyType=\"default\"\n                                    autoCompleteType=\"name\"\n                                    autoCapitalize=\"words\"\n                                />\n                            )}\n                            name=\"fullName\"\n                            defaultValue=\"\"\n                            rules={typeof signUpFields.fullName === \"boolean\" ? {} : signUpFields.fullName}\n                        />\n                        <ErrorText value={errors.fullName?.message} />\n                    </Fragment>\n                }\n\n                {signUpFields.gender &&\n                    <Fragment>\n                        <SpacerXL />\n                        <Controller\n                            control={control}\n                            render={({ field: { onChange, onBlur, value } }) => (\n                                <Picker\n                                    onValueChange={value => onChange(value)}\n                                    selectedValue={value}\n                                    enabled={!isSubmitting}\n                                    mode=\"dialog\"\n                                >\n                                    {[\"Male\", \"Female\", \"Prefer not to say\"].map(e => <Picker.Item label={e} value={e} />)}\n                                </Picker>\n                            )}\n                            name=\"gender\"\n                            defaultValue=\"\"\n                            rules={typeof signUpFields.gender === \"boolean\" ? {} : signUpFields.gender}\n                        />\n                        <ErrorText value={errors.gender?.message} />\n                    </Fragment>\n                }\n\n                {signUpFields.phoneNumber &&\n                    <Fragment>\n                        <SpacerXL />\n                        <Controller\n                            control={control}\n                            render={({ field: { onChange, onBlur, value } }) => (\n                                <Input\n                                    onBlur={onBlur}\n                                    onChangeText={value => onChange(value)}\n                                    value={value}\n                                    placeholder={dictionary.newPhoneNumberLabel}\n                                    editable={!isSubmitting}\n                                    returnKeyType=\"default\"\n                                    keyboardType=\"number-pad\"\n                                />\n                            )}\n                            name=\"phoneNumber\"\n                            defaultValue=\"\"\n                            rules={typeof signUpFields.phoneNumber === \"boolean\" ? {} : signUpFields.phoneNumber}\n                        />\n                        <ErrorText value={errors.phoneNumber?.message} />\n                    </Fragment>\n                }\n\n                <SpacerXL />\n                <Controller\n                    control={control}\n                    render={({ field: { onChange, onBlur, value } }) => (\n                        <Input\n                            onBlur={onBlur}\n                            onChangeText={value => onChange(value)}\n                            value={value}\n                            placeholder={dictionary.newPasswordLabel}\n                            editable={!isSubmitting}\n                            returnKeyType=\"default\"\n                            secureTextEntry={true}\n                            autoCompleteType=\"password\"\n                            autoCapitalize=\"none\"\n                        />\n                    )}\n                    name=\"password\"\n                    defaultValue=\"\"\n                    rules={passwordReqs}\n                />\n                <ErrorText value={errors.password?.message} />\n                <SpacerXL />\n                <Controller\n                    control={control}\n                    render={({ field: { onChange, onBlur, value } }) => (\n                        <Input\n                            onBlur={onBlur}\n                            onChangeText={value => onChange(value)}\n                            value={value}\n                            placeholder={dictionary.confirmNewPasswordLabel}\n                            editable={!isSubmitting}\n                            returnKeyType=\"default\"\n                            secureTextEntry={true}\n                            autoCompleteType=\"password\"\n                            autoCapitalize=\"none\"\n                        />\n                    )}\n                    name=\"passwordConfirm\"\n                    defaultValue=\"\"\n                    rules={passwordReqs}\n                />\n                <ErrorText value={errors.passwordConfirm?.message} />\n            </MainView>\n\n            <View>\n                <SubmitButton onPress={handleSubmit(onSubmit)} disabled={isSubmitting} title={dictionary.signUpSubmitButton} />\n                <SpacerS />\n                <SecondaryButton onPress={(_: any) => setCurrentPage(\"SignIn\")} disabled={isSubmitting} title={dictionary.backToSignIn} />\n            </View>\n        </Form>\n    )\n}\n"],"names":["require","useEasybase","setCurrentPage","dictionary","signUpFields","toast","useForm","control","handleSubmit","formState","errors","isSubmitting","reset","signUp","signIn","onSubmit","formData","email","password","passwordConfirm","errorPasswordsDoNotMatch","signUpAttrs","createdAt","Date","toISOString","currField","signUpRes","success","errorCode","errorBadInputFormat","errorPasswordTooShort","errorUserAlreadyExists","passwordReqs","minLength","value","message","maxLength","pattern","React","Form","HeaderText","signUpHeader","MainView","Controller","render","field","onChange","onBlur","Input","onChangeText","placeholder","newEmailLabel","editable","keyboardType","returnKeyType","autoCompleteType","autoCapitalize","name","defaultValue","firstName","Fragment","SpacerXL","newFirstNameLabel","rules","ErrorText","lastName","newLastNameLabel","fullName","newFullNameLabel","gender","Picker","onValueChange","selectedValue","enabled","mode","map","e","Item","label","phoneNumber","newPhoneNumberLabel","newPasswordLabel","secureTextEntry","confirmNewPasswordLabel","View","SubmitButton","onPress","disabled","title","signUpSubmitButton","SpacerS","SecondaryButton","_","backToSignIn"],"mappings":"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"}