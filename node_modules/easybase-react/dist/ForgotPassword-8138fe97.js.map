{"version":3,"file":"ForgotPassword-8138fe97.js","sources":["../src/ui/Auth/components/SecondaryText.tsx","../src/ui/Auth/pages/ForgotPassword.tsx"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst SecondaryText = styled.h2(props => ({\n    fontFamily: \"inherit\",\n    fontSize: 15,\n    fontWeight: 300,\n    letterSpacing: -.2,\n    lineHeight: '20px',\n    whiteSpace: 'normal',\n    ...(props.theme.secondaryText ? { ...props.theme.secondaryText } : {})\n}))\n\nexport default function (props: React.HTMLAttributes<HTMLHeadingElement>) {\n    return (\n        <SecondaryText {...props} />\n    )\n}\n","import React, { useState } from 'react';\nimport Form from '../components/Form';\nimport EmailInput from '../components/EmailInput';\nimport HeaderText from '../components/HeaderText';\nimport SecondaryText from '../components/SecondaryText';\nimport SecondaryButton from '../components/SecondaryButton';\nimport SubmitButton from '../components/SubmitButton';\nimport Spacer from '../components/Spacer';\nimport { useForm } from 'react-hook-form';\nimport { IPage } from '../../uiTypes';\nimport toast from 'react-hot-toast';\nimport ErrorText from '../components/ErrorText';\nimport Input from '../components/internal/Input';\nimport PasswordInput from '../components/PasswordInput';\nimport useEasybase from '../../../useEasybase';\n\nexport default function ({ setCurrentPage, dictionary, emailTemplate }: IPage) {\n    const [onConfirm, setOnConfirm] = useState<boolean>(false);\n    const [forgottenUsername, setForgottenUsername] = useState<string | undefined>();\n    const { register, handleSubmit, reset, formState: { errors, isSubmitting } } = useForm();\n    const { forgotPassword, forgotPasswordConfirm } = useEasybase();\n\n    const onSubmit = async (formData: Record<string, string>) => {\n        if (!formData.email) {\n            return;\n        }\n\n        const forgotRes = await forgotPassword(formData.email, emailTemplate);\n        if (forgotRes.success) {\n            setForgottenUsername(formData.email);\n            setOnConfirm(true);\n            toast.success('Check your email for a verification code')\n        } else {\n            if (forgotRes.errorCode === \"RequestLimitExceeded\") {\n                toast.error(dictionary.errorRequestLimitExceeded!);\n            } else if (forgotRes.errorCode === \"BadFormat\") {\n                reset();\n                toast.error(dictionary.errorBadInputFormat!);\n            } else if (forgotRes.errorCode === \"NoUserExists\") {\n                reset();\n                toast.error(dictionary.errorNoAccountFound!);\n            } else {\n                reset();\n                toast.error('Bad request');\n            }\n        }\n    }\n\n    const onConfirmSubmit = async (formData: Record<string, string>) => {\n        if (!formData.code || !formData.newPassword || !forgottenUsername) {\n            return;\n        }\n        const forgotConfirmRes = await forgotPasswordConfirm(formData.code, forgottenUsername, formData.newPassword)\n        if (forgotConfirmRes.success) {\n            setOnConfirm(false);\n            setForgottenUsername(\"\");\n            setCurrentPage('SignIn');\n            toast.success('Password successfully changed')\n        } else {\n            if (forgotConfirmRes.errorCode === \"BadPasswordLength\") {\n                toast.error(dictionary.errorPasswordTooShort!);\n            } else if (forgotConfirmRes.errorCode === \"BadFormat\") {\n                reset();\n                toast.error(dictionary.errorBadInputFormat!);\n            } else if (forgotConfirmRes.errorCode === \"NoUserExists\") {\n                reset();\n                toast.error(dictionary.errorNoAccountFound!);\n            } else if (forgotConfirmRes.errorCode === \"WrongVerificationCode\") {\n                toast.error(dictionary.errorWrongVerificationCode!);\n            } else {\n                toast.error('Bad request');\n            }\n        }\n    }\n\n    const passwordReqs = {\n        minLength: {\n            value: 8,\n            message: \"Password must be at least 8 characters long\"\n        },\n        maxLength: {\n            value: 100,\n            message: \"Password too long\"\n        },\n        pattern: {\n            value: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{7,}$/gm,\n            message: \"Must contain a digit and uppercase and lowercase letters\"\n        }\n    }\n\n    const codeReqs = {\n        minLength: {\n            value: 8,\n            message: \"Incorrect code length\"\n        }\n    }\n\n    if (!onConfirm) {\n        return (\n            <Form onSubmit={handleSubmit(onSubmit)}>\n                <HeaderText>{dictionary.forgotPasswordHeader}</HeaderText>\n                <SecondaryText>{dictionary.forgotPasswordSecondaryHeader}</SecondaryText>\n                <Spacer size=\"medium\" />\n                <EmailInput\n                    register={() => register(\"email\")}\n                    label={dictionary.newEmailLabel}\n                    disabled={isSubmitting}\n                />\n                <Spacer size=\"medium\" />\n                <SubmitButton disabled={isSubmitting}>{dictionary.forgotPasswordSubmitButton}</SubmitButton>\n                <SecondaryButton onClick={_ => setCurrentPage(\"SignIn\")} disabled={isSubmitting}>{dictionary.backToSignIn}</SecondaryButton>\n            </Form>\n        )\n    } else {\n        return (\n            <Form onSubmit={handleSubmit(onConfirmSubmit)}>\n                <HeaderText>{dictionary.forgotPasswordConfirmHeader}</HeaderText>\n                <Spacer size=\"medium\" />\n                <Input\n                    register={() => register(\"code\", codeReqs)}\n                    label={dictionary.codeLabel!}\n                    disabled={isSubmitting}\n                />\n                <ErrorText value={errors.code?.message} />\n                <Spacer size=\"xlarge\" />\n                <PasswordInput\n                    register={() => register(\"newPassword\", passwordReqs)}\n                    label={dictionary.forgotPasswordConfirmLabel}\n                    autoComplete=\"new-password\"\n                    disabled={isSubmitting}\n                />\n                <ErrorText value={errors.newPassword?.message} />\n                <Spacer size=\"xlarge\" />\n                <SubmitButton disabled={isSubmitting}>{dictionary.forgotPasswordConfirmSubmitButton}</SubmitButton>\n            </Form>\n        )\n    }\n}\n"],"names":["SecondaryText","styled","h2","props","fontFamily","fontSize","fontWeight","letterSpacing","lineHeight","whiteSpace","theme","secondaryText","React","setCurrentPage","dictionary","emailTemplate","useState","onConfirm","setOnConfirm","forgottenUsername","setForgottenUsername","useForm","register","handleSubmit","reset","formState","errors","isSubmitting","useEasybase","forgotPassword","forgotPasswordConfirm","onSubmit","formData","email","forgotRes","success","toast","errorCode","error","errorRequestLimitExceeded","errorBadInputFormat","errorNoAccountFound","onConfirmSubmit","code","newPassword","forgotConfirmRes","errorPasswordTooShort","errorWrongVerificationCode","passwordReqs","minLength","value","message","maxLength","pattern","codeReqs","Form","HeaderText","forgotPasswordHeader","forgotPasswordSecondaryHeader","Spacer","size","EmailInput","label","newEmailLabel","disabled","SubmitButton","forgotPasswordSubmitButton","SecondaryButton","onClick","_","backToSignIn","forgotPasswordConfirmHeader","Input","codeLabel","ErrorText","PasswordInput","forgotPasswordConfirmLabel","autoComplete","forgotPasswordConfirmSubmitButton"],"mappings":"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"}