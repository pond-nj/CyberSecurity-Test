import React__default, { Fragment } from 'react';
import { u as useForm, C as Controller } from './index.esm-51b86b60.js';
import { F as Form, H as HeaderText, M as MainView, I as Input, S as SpacerXL, E as ErrorText, P as Picker, V as View, b as SubmitButton, c as SpacerS, d as SecondaryButton } from './NativeAuth-42b1ee64.js';

const {
  useEasybase
} = require('easybase-react');

function SignUp ({
  setCurrentPage,
  dictionary,
  signUpFields,
  toast
}) {
  var _errors$firstName, _errors$lastName, _errors$fullName, _errors$gender, _errors$phoneNumber, _errors$password, _errors$passwordConfi;

  const {
    control,
    handleSubmit,
    formState: {
      errors,
      isSubmitting
    },
    reset
  } = useForm();
  const {
    signUp,
    signIn
  } = useEasybase();

  const onSubmit = async formData => {
    if (!formData.email || !formData.password || !formData.passwordConfirm) {
      return;
    }

    if (formData.password !== formData.passwordConfirm) {
      toast(dictionary.errorPasswordsDoNotMatch);
      reset();
      return;
    }

    const signUpAttrs = {
      createdAt: new Date().toISOString()
    };

    for (const currField of ["firstName", "lastName", "fullName", "dateOfBirth", "gender", "phoneNumber"]) {
      if (signUpFields[currField]) {
        if (formData[currField]) {
          signUpAttrs[currField] = "" + formData[currField];
        } else {
          toast("Missing sign up field value");
          return;
        }
      }
    }

    const signUpRes = await signUp(formData.email, formData.password, signUpAttrs);

    if (signUpRes.success) {
      setCurrentPage("SignIn");
      await signIn(formData.email, formData.password);
    } else {
      if (signUpRes.errorCode === "BadFormat") {
        reset();
        toast(dictionary.errorBadInputFormat);
      } else if (signUpRes.errorCode === "BadPasswordLength") {
        toast(dictionary.errorPasswordTooShort);
      } else if (signUpRes.errorCode === "UserExists") {
        reset();
        toast(dictionary.errorUserAlreadyExists);
      }
    }
  };

  const passwordReqs = {
    minLength: {
      value: 8,
      message: "Password must be at least 8 characters long"
    },
    maxLength: {
      value: 100,
      message: "Password too long"
    },
    pattern: {
      value: /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{7,}$/gm,
      message: "Must contain a digit and uppercase and lowercase letters"
    }
  };
  return React__default.createElement(Form, null, React__default.createElement(HeaderText, null, dictionary.signUpHeader), React__default.createElement(MainView, null, React__default.createElement(Controller, {
    control: control,
    render: ({
      field: {
        onChange,
        onBlur,
        value
      }
    }) => React__default.createElement(Input, {
      onBlur: onBlur,
      onChangeText: value => onChange(value),
      value: value,
      placeholder: dictionary.newEmailLabel,
      editable: !isSubmitting,
      keyboardType: "email-address",
      returnKeyType: "default",
      autoCompleteType: "email",
      autoCapitalize: "none"
    }),
    name: "email",
    defaultValue: ""
  }), signUpFields.firstName && React__default.createElement(Fragment, null, React__default.createElement(SpacerXL, null), React__default.createElement(Controller, {
    control: control,
    render: ({
      field: {
        onChange,
        onBlur,
        value
      }
    }) => React__default.createElement(Input, {
      onBlur: onBlur,
      onChangeText: value => onChange(value),
      value: value,
      placeholder: dictionary.newFirstNameLabel,
      editable: !isSubmitting,
      returnKeyType: "default",
      autoCompleteType: "name",
      autoCapitalize: "words"
    }),
    name: "firstName",
    defaultValue: "",
    rules: typeof signUpFields.firstName === "boolean" ? {} : signUpFields.firstName
  }), React__default.createElement(ErrorText, {
    value: (_errors$firstName = errors.firstName) == null ? void 0 : _errors$firstName.message
  })), signUpFields.lastName && React__default.createElement(Fragment, null, React__default.createElement(SpacerXL, null), React__default.createElement(Controller, {
    control: control,
    render: ({
      field: {
        onChange,
        onBlur,
        value
      }
    }) => React__default.createElement(Input, {
      onBlur: onBlur,
      onChangeText: value => onChange(value),
      value: value,
      placeholder: dictionary.newLastNameLabel,
      editable: !isSubmitting,
      returnKeyType: "default",
      autoCompleteType: "name",
      autoCapitalize: "words"
    }),
    name: "lastName",
    defaultValue: "",
    rules: typeof signUpFields.lastName === "boolean" ? {} : signUpFields.lastName
  }), React__default.createElement(ErrorText, {
    value: (_errors$lastName = errors.lastName) == null ? void 0 : _errors$lastName.message
  })), signUpFields.fullName && React__default.createElement(Fragment, null, React__default.createElement(SpacerXL, null), React__default.createElement(Controller, {
    control: control,
    render: ({
      field: {
        onChange,
        onBlur,
        value
      }
    }) => React__default.createElement(Input, {
      onBlur: onBlur,
      onChangeText: value => onChange(value),
      value: value,
      placeholder: dictionary.newFullNameLabel,
      editable: !isSubmitting,
      returnKeyType: "default",
      autoCompleteType: "name",
      autoCapitalize: "words"
    }),
    name: "fullName",
    defaultValue: "",
    rules: typeof signUpFields.fullName === "boolean" ? {} : signUpFields.fullName
  }), React__default.createElement(ErrorText, {
    value: (_errors$fullName = errors.fullName) == null ? void 0 : _errors$fullName.message
  })), signUpFields.gender && React__default.createElement(Fragment, null, React__default.createElement(SpacerXL, null), React__default.createElement(Controller, {
    control: control,
    render: ({
      field: {
        onChange,
        onBlur,
        value
      }
    }) => React__default.createElement(Picker, {
      onValueChange: value => onChange(value),
      selectedValue: value,
      enabled: !isSubmitting,
      mode: "dialog"
    }, ["Male", "Female", "Prefer not to say"].map(e => React__default.createElement(Picker.Item, {
      label: e,
      value: e
    }))),
    name: "gender",
    defaultValue: "",
    rules: typeof signUpFields.gender === "boolean" ? {} : signUpFields.gender
  }), React__default.createElement(ErrorText, {
    value: (_errors$gender = errors.gender) == null ? void 0 : _errors$gender.message
  })), signUpFields.phoneNumber && React__default.createElement(Fragment, null, React__default.createElement(SpacerXL, null), React__default.createElement(Controller, {
    control: control,
    render: ({
      field: {
        onChange,
        onBlur,
        value
      }
    }) => React__default.createElement(Input, {
      onBlur: onBlur,
      onChangeText: value => onChange(value),
      value: value,
      placeholder: dictionary.newPhoneNumberLabel,
      editable: !isSubmitting,
      returnKeyType: "default",
      keyboardType: "number-pad"
    }),
    name: "phoneNumber",
    defaultValue: "",
    rules: typeof signUpFields.phoneNumber === "boolean" ? {} : signUpFields.phoneNumber
  }), React__default.createElement(ErrorText, {
    value: (_errors$phoneNumber = errors.phoneNumber) == null ? void 0 : _errors$phoneNumber.message
  })), React__default.createElement(SpacerXL, null), React__default.createElement(Controller, {
    control: control,
    render: ({
      field: {
        onChange,
        onBlur,
        value
      }
    }) => React__default.createElement(Input, {
      onBlur: onBlur,
      onChangeText: value => onChange(value),
      value: value,
      placeholder: dictionary.newPasswordLabel,
      editable: !isSubmitting,
      returnKeyType: "default",
      secureTextEntry: true,
      autoCompleteType: "password",
      autoCapitalize: "none"
    }),
    name: "password",
    defaultValue: "",
    rules: passwordReqs
  }), React__default.createElement(ErrorText, {
    value: (_errors$password = errors.password) == null ? void 0 : _errors$password.message
  }), React__default.createElement(SpacerXL, null), React__default.createElement(Controller, {
    control: control,
    render: ({
      field: {
        onChange,
        onBlur,
        value
      }
    }) => React__default.createElement(Input, {
      onBlur: onBlur,
      onChangeText: value => onChange(value),
      value: value,
      placeholder: dictionary.confirmNewPasswordLabel,
      editable: !isSubmitting,
      returnKeyType: "default",
      secureTextEntry: true,
      autoCompleteType: "password",
      autoCapitalize: "none"
    }),
    name: "passwordConfirm",
    defaultValue: "",
    rules: passwordReqs
  }), React__default.createElement(ErrorText, {
    value: (_errors$passwordConfi = errors.passwordConfirm) == null ? void 0 : _errors$passwordConfi.message
  })), React__default.createElement(View, null, React__default.createElement(SubmitButton, {
    onPress: handleSubmit(onSubmit),
    disabled: isSubmitting,
    title: dictionary.signUpSubmitButton
  }), React__default.createElement(SpacerS, null), React__default.createElement(SecondaryButton, {
    onPress: _ => setCurrentPage("SignIn"),
    disabled: isSubmitting,
    title: dictionary.backToSignIn
  })));
}

export { SignUp as default };
//# sourceMappingURL=SignUp-a1799f79.js.map
