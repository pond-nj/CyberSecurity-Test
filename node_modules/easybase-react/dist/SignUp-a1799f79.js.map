{"version":3,"file":"SignUp-a1799f79.js","sources":["../src/ui/NativeAuth/pages/SignUp.tsx"],"sourcesContent":["import React, { Fragment } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { INativePage, ISignUpFields } from '../../uiTypes';\nimport { Form, HeaderText, View, Input, SpacerXL, SubmitButton, SpacerS, SecondaryButton, ErrorText, Picker, MainView } from '../components';\n\nconst { useEasybase } = require('easybase-react');\n\ninterface ISignUpPage extends INativePage {\n    signUpFields: ISignUpFields\n}\n\nexport default function ({ setCurrentPage, dictionary, signUpFields, toast }: ISignUpPage) {\n    const { control, handleSubmit, formState: { errors, isSubmitting }, reset } = useForm();\n    const { signUp, signIn } = useEasybase();\n\n    const onSubmit = async (formData: Record<string, string>) => {\n        if (!formData.email || !formData.password || !formData.passwordConfirm) {\n            return;\n        }\n        if (formData.password !== formData.passwordConfirm) {\n            toast(dictionary.errorPasswordsDoNotMatch!);\n            reset();\n            return;\n        }\n\n        const signUpAttrs = { createdAt: new Date().toISOString() };\n        for (const currField of [\"firstName\", \"lastName\", \"fullName\", \"dateOfBirth\", \"gender\", \"phoneNumber\"]) {\n            if (signUpFields[currField]) {\n                if (formData[currField]) {\n                    signUpAttrs[currField] = \"\" + formData[currField];\n                } else {\n                    toast(\"Missing sign up field value\");\n                    return;\n                }\n            }\n        }\n\n        const signUpRes = await signUp(formData.email, formData.password, signUpAttrs);\n        if (signUpRes.success) {\n            setCurrentPage(\"SignIn\")\n            await signIn(formData.email, formData.password)\n        } else {\n            if (signUpRes.errorCode === \"BadFormat\") {\n                reset();\n                toast(dictionary.errorBadInputFormat!);\n            } else if (signUpRes.errorCode === \"BadPasswordLength\") {\n                toast(dictionary.errorPasswordTooShort!);\n            } else if (signUpRes.errorCode === \"UserExists\") {\n                reset();\n                toast(dictionary.errorUserAlreadyExists!);\n            }\n        }\n    }\n\n    const passwordReqs = {\n        minLength: {\n            value: 8,\n            message: \"Password must be at least 8 characters long\"\n        },\n        maxLength: {\n            value: 100,\n            message: \"Password too long\"\n        },\n        pattern: {\n            value: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{7,}$/gm,\n            message: \"Must contain a digit and uppercase and lowercase letters\"\n        }\n    }\n\n    return (\n        <Form>\n            <HeaderText>{dictionary.signUpHeader}</HeaderText>\n\n            <MainView>\n                <Controller\n                    control={control}\n                    render={({ field: { onChange, onBlur, value } }) => (\n                        <Input\n                            onBlur={onBlur}\n                            onChangeText={value => onChange(value)}\n                            value={value}\n                            placeholder={dictionary.newEmailLabel}\n                            editable={!isSubmitting}\n                            keyboardType=\"email-address\"\n                            returnKeyType=\"default\"\n                            autoCompleteType=\"email\"\n                            autoCapitalize=\"none\"\n                        />\n                    )}\n                    name=\"email\"\n                    defaultValue=\"\"\n                />\n\n                {signUpFields.firstName &&\n                    <Fragment>\n                        <SpacerXL />\n                        <Controller\n                            control={control}\n                            render={({ field: { onChange, onBlur, value } }) => (\n                                <Input\n                                    onBlur={onBlur}\n                                    onChangeText={value => onChange(value)}\n                                    value={value}\n                                    placeholder={dictionary.newFirstNameLabel}\n                                    editable={!isSubmitting}\n                                    returnKeyType=\"default\"\n                                    autoCompleteType=\"name\"\n                                    autoCapitalize=\"words\"\n                                />\n                            )}\n                            name=\"firstName\"\n                            defaultValue=\"\"\n                            rules={typeof signUpFields.firstName === \"boolean\" ? {} : signUpFields.firstName}\n                        />\n                        <ErrorText value={errors.firstName?.message} />\n                    </Fragment>\n                }\n\n                {signUpFields.lastName &&\n                    <Fragment>\n                        <SpacerXL />\n                        <Controller\n                            control={control}\n                            render={({ field: { onChange, onBlur, value } }) => (\n                                <Input\n                                    onBlur={onBlur}\n                                    onChangeText={value => onChange(value)}\n                                    value={value}\n                                    placeholder={dictionary.newLastNameLabel}\n                                    editable={!isSubmitting}\n                                    returnKeyType=\"default\"\n                                    autoCompleteType=\"name\"\n                                    autoCapitalize=\"words\"\n                                />\n                            )}\n                            name=\"lastName\"\n                            defaultValue=\"\"\n                            rules={typeof signUpFields.lastName === \"boolean\" ? {} : signUpFields.lastName}\n                        />\n                        <ErrorText value={errors.lastName?.message} />\n                    </Fragment>\n                }\n\n                {signUpFields.fullName &&\n                    <Fragment>\n                        <SpacerXL />\n                        <Controller\n                            control={control}\n                            render={({ field: { onChange, onBlur, value } }) => (\n                                <Input\n                                    onBlur={onBlur}\n                                    onChangeText={value => onChange(value)}\n                                    value={value}\n                                    placeholder={dictionary.newFullNameLabel}\n                                    editable={!isSubmitting}\n                                    returnKeyType=\"default\"\n                                    autoCompleteType=\"name\"\n                                    autoCapitalize=\"words\"\n                                />\n                            )}\n                            name=\"fullName\"\n                            defaultValue=\"\"\n                            rules={typeof signUpFields.fullName === \"boolean\" ? {} : signUpFields.fullName}\n                        />\n                        <ErrorText value={errors.fullName?.message} />\n                    </Fragment>\n                }\n\n                {signUpFields.gender &&\n                    <Fragment>\n                        <SpacerXL />\n                        <Controller\n                            control={control}\n                            render={({ field: { onChange, onBlur, value } }) => (\n                                <Picker\n                                    onValueChange={value => onChange(value)}\n                                    selectedValue={value}\n                                    enabled={!isSubmitting}\n                                    mode=\"dialog\"\n                                >\n                                    {[\"Male\", \"Female\", \"Prefer not to say\"].map(e => <Picker.Item label={e} value={e} />)}\n                                </Picker>\n                            )}\n                            name=\"gender\"\n                            defaultValue=\"\"\n                            rules={typeof signUpFields.gender === \"boolean\" ? {} : signUpFields.gender}\n                        />\n                        <ErrorText value={errors.gender?.message} />\n                    </Fragment>\n                }\n\n                {signUpFields.phoneNumber &&\n                    <Fragment>\n                        <SpacerXL />\n                        <Controller\n                            control={control}\n                            render={({ field: { onChange, onBlur, value } }) => (\n                                <Input\n                                    onBlur={onBlur}\n                                    onChangeText={value => onChange(value)}\n                                    value={value}\n                                    placeholder={dictionary.newPhoneNumberLabel}\n                                    editable={!isSubmitting}\n                                    returnKeyType=\"default\"\n                                    keyboardType=\"number-pad\"\n                                />\n                            )}\n                            name=\"phoneNumber\"\n                            defaultValue=\"\"\n                            rules={typeof signUpFields.phoneNumber === \"boolean\" ? {} : signUpFields.phoneNumber}\n                        />\n                        <ErrorText value={errors.phoneNumber?.message} />\n                    </Fragment>\n                }\n\n                <SpacerXL />\n                <Controller\n                    control={control}\n                    render={({ field: { onChange, onBlur, value } }) => (\n                        <Input\n                            onBlur={onBlur}\n                            onChangeText={value => onChange(value)}\n                            value={value}\n                            placeholder={dictionary.newPasswordLabel}\n                            editable={!isSubmitting}\n                            returnKeyType=\"default\"\n                            secureTextEntry={true}\n                            autoCompleteType=\"password\"\n                            autoCapitalize=\"none\"\n                        />\n                    )}\n                    name=\"password\"\n                    defaultValue=\"\"\n                    rules={passwordReqs}\n                />\n                <ErrorText value={errors.password?.message} />\n                <SpacerXL />\n                <Controller\n                    control={control}\n                    render={({ field: { onChange, onBlur, value } }) => (\n                        <Input\n                            onBlur={onBlur}\n                            onChangeText={value => onChange(value)}\n                            value={value}\n                            placeholder={dictionary.confirmNewPasswordLabel}\n                            editable={!isSubmitting}\n                            returnKeyType=\"default\"\n                            secureTextEntry={true}\n                            autoCompleteType=\"password\"\n                            autoCapitalize=\"none\"\n                        />\n                    )}\n                    name=\"passwordConfirm\"\n                    defaultValue=\"\"\n                    rules={passwordReqs}\n                />\n                <ErrorText value={errors.passwordConfirm?.message} />\n            </MainView>\n\n            <View>\n                <SubmitButton onPress={handleSubmit(onSubmit)} disabled={isSubmitting} title={dictionary.signUpSubmitButton} />\n                <SpacerS />\n                <SecondaryButton onPress={(_: any) => setCurrentPage(\"SignIn\")} disabled={isSubmitting} title={dictionary.backToSignIn} />\n            </View>\n        </Form>\n    )\n}\n"],"names":["useEasybase","require","setCurrentPage","dictionary","signUpFields","toast","control","handleSubmit","formState","errors","isSubmitting","reset","useForm","signUp","signIn","onSubmit","formData","email","password","passwordConfirm","errorPasswordsDoNotMatch","signUpAttrs","createdAt","Date","toISOString","currField","signUpRes","success","errorCode","errorBadInputFormat","errorPasswordTooShort","errorUserAlreadyExists","passwordReqs","minLength","value","message","maxLength","pattern","React","Form","HeaderText","signUpHeader","MainView","Controller","render","field","onChange","onBlur","Input","onChangeText","placeholder","newEmailLabel","editable","keyboardType","returnKeyType","autoCompleteType","autoCapitalize","name","defaultValue","firstName","Fragment","SpacerXL","newFirstNameLabel","rules","ErrorText","lastName","newLastNameLabel","fullName","newFullNameLabel","gender","Picker","onValueChange","selectedValue","enabled","mode","map","e","Item","label","phoneNumber","newPhoneNumberLabel","newPasswordLabel","secureTextEntry","confirmNewPasswordLabel","View","SubmitButton","onPress","disabled","title","signUpSubmitButton","SpacerS","SecondaryButton","_","backToSignIn"],"mappings":"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"}