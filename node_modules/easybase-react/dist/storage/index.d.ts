export default class Storage {
    constructor(options?: {});
    _SIZE: any;
    sync: any;
    defaultExpires: any;
    enableCache: boolean;
    _s: any;
    _innerVersion: number;
    cache: {};
    isPromise: boolean | undefined;
    _mapPromise: any;
    _m: any;
    getItem(key: any): any;
    setItem(key: any, value: any): any;
    removeItem(key: any): any;
    _initMap(): {
        innerVersion: number;
        index: number;
        __keys__: {};
    };
    _checkMap(map: any): any;
    _getId(key: any, id: any): string;
    _saveToMap(params: any): any;
    save(params: any): any;
    getBatchData(querys: any): Promise<[any, any, any, any, any, any, any, any, any, any]>;
    getBatchDataWithIds(params: any): Promise<any[]>;
    _lookupGlobalItem(params: any): any;
    _loadGlobalItem(params: any): any;
    _noItemFound(params: any): any;
    _loadMapItem(params: any): any;
    _lookUpInMap(params: any): any;
    remove(params: any): any;
    _removeIdInKey(key: any, id: any): void;
    load(params: any): any;
    clearAll(): void;
    clearMap(): any;
    clearMapForKey(key: any): any;
    getIdsForKey(key: any): any;
    getAllDataForKey(key: any, options: any): any;
}
import { NotFoundError } from "./error";
import { ExpiredError } from "./error";
export { NotFoundError, ExpiredError };
