import React__default, { useState } from 'react';
import { u as useForm, C as Controller } from './index.esm-51b86b60.js';
import { F as Form, H as HeaderText, M as MainView, e as SecondaryText, S as SpacerXL, I as Input, V as View, b as SubmitButton, c as SpacerS, d as SecondaryButton, E as ErrorText, N as NoSecondaryButton } from './NativeAuth-42b1ee64.js';

const {
  useEasybase
} = require('easybase-react');

function ForgotPassword ({
  setCurrentPage,
  dictionary,
  toast,
  emailTemplate
}) {
  const [onConfirm, setOnConfirm] = useState(false);
  const [forgottenUsername, setForgottenUsername] = useState();
  const {
    control,
    handleSubmit,
    reset,
    formState: {
      isSubmitting,
      errors
    }
  } = useForm();
  const {
    forgotPassword,
    forgotPasswordConfirm
  } = useEasybase();

  const onSubmit = async formData => {
    if (!formData.email) {
      return;
    }

    const forgotRes = await forgotPassword(formData.email, emailTemplate);

    if (forgotRes.success) {
      setForgottenUsername(formData.email);
      setOnConfirm(true);
      toast('Check your email for a verification code');
    } else {
      if (forgotRes.errorCode === "RequestLimitExceeded") {
        toast(dictionary.errorRequestLimitExceeded);
      } else if (forgotRes.errorCode === "BadFormat") {
        reset();
        toast(dictionary.errorBadInputFormat);
      } else if (forgotRes.errorCode === "NoUserExists") {
        reset();
        toast(dictionary.errorNoAccountFound);
      } else {
        reset();
        toast('Bad request');
      }
    }
  };

  const onConfirmSubmit = async formData => {
    if (!formData.code || !formData.newPassword || !forgottenUsername) {
      return;
    }

    const forgotConfirmRes = await forgotPasswordConfirm(formData.code, forgottenUsername, formData.newPassword);

    if (forgotConfirmRes.success) {
      setOnConfirm(false);
      setForgottenUsername("");
      setCurrentPage('SignIn');
      toast('Password successfully changed');
    } else {
      if (forgotConfirmRes.errorCode === "BadPasswordLength") {
        toast(dictionary.errorPasswordTooShort);
      } else if (forgotConfirmRes.errorCode === "BadFormat") {
        reset();
        toast(dictionary.errorBadInputFormat);
      } else if (forgotConfirmRes.errorCode === "NoUserExists") {
        reset();
        toast(dictionary.errorNoAccountFound);
      } else if (forgotConfirmRes.errorCode === "WrongVerificationCode") {
        toast(dictionary.errorWrongVerificationCode);
      } else {
        toast('Bad request');
      }
    }
  };

  const passwordReqs = {
    minLength: {
      value: 8,
      message: "Password must be at least 8 characters long"
    },
    maxLength: {
      value: 100,
      message: "Password too long"
    },
    pattern: {
      value: /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{7,}$/gm,
      message: "Must contain a digit and uppercase and lowercase letters"
    }
  };
  const codeReqs = {
    minLength: {
      value: 8,
      message: "Incorrect code length"
    }
  };

  if (!onConfirm) {
    return React__default.createElement(Form, null, React__default.createElement(HeaderText, null, dictionary.forgotPasswordHeader), React__default.createElement(MainView, null, React__default.createElement(SecondaryText, null, dictionary.forgotPasswordSecondaryHeader), React__default.createElement(SpacerXL, null), React__default.createElement(Controller, {
      control: control,
      render: ({
        field: {
          onChange,
          onBlur,
          value
        }
      }) => React__default.createElement(Input, {
        onBlur: onBlur,
        onChangeText: value => onChange(value),
        value: value,
        placeholder: dictionary.newEmailLabel,
        editable: !isSubmitting,
        keyboardType: "email-address",
        returnKeyType: "default",
        autoCompleteType: "email",
        autoCapitalize: "none"
      }),
      name: "email",
      defaultValue: ""
    })), React__default.createElement(View, null, React__default.createElement(SubmitButton, {
      onPress: handleSubmit(onSubmit),
      disabled: isSubmitting,
      title: dictionary.forgotPasswordSubmitButton
    }), React__default.createElement(SpacerS, null), React__default.createElement(SecondaryButton, {
      onPress: _ => setCurrentPage("SignIn"),
      disabled: isSubmitting,
      title: dictionary.backToSignIn
    })));
  } else {
    var _errors$code, _errors$newPassword;

    return React__default.createElement(Form, null, React__default.createElement(HeaderText, null, dictionary.forgotPasswordConfirmHeader), React__default.createElement(MainView, null, React__default.createElement(Controller, {
      control: control,
      render: ({
        field: {
          onChange,
          onBlur,
          value
        }
      }) => React__default.createElement(Input, {
        onBlur: onBlur,
        onChangeText: value => onChange(value),
        value: value,
        placeholder: dictionary.codeLabel,
        editable: !isSubmitting,
        returnKeyType: "default",
        autoCapitalize: "characters"
      }),
      name: "code",
      defaultValue: "",
      rules: codeReqs
    }), React__default.createElement(ErrorText, {
      value: (_errors$code = errors.code) == null ? void 0 : _errors$code.message
    }), React__default.createElement(SpacerXL, null), React__default.createElement(Controller, {
      control: control,
      render: ({
        field: {
          onChange,
          onBlur,
          value
        }
      }) => React__default.createElement(Input, {
        onBlur: onBlur,
        onChangeText: value => onChange(value),
        value: value,
        placeholder: dictionary.forgotPasswordConfirmLabel,
        editable: !isSubmitting,
        returnKeyType: "default",
        secureTextEntry: true,
        autoCompleteType: "password",
        autoCapitalize: "none"
      }),
      name: "newPassword",
      defaultValue: "",
      rules: passwordReqs
    }), React__default.createElement(ErrorText, {
      value: (_errors$newPassword = errors.newPassword) == null ? void 0 : _errors$newPassword.message
    })), React__default.createElement(View, null, React__default.createElement(SubmitButton, {
      onPress: handleSubmit(onConfirmSubmit),
      disabled: isSubmitting,
      title: dictionary.forgotPasswordConfirmSubmitButton
    }), React__default.createElement(SpacerS, null), React__default.createElement(NoSecondaryButton, null)));
  }
}

export { ForgotPassword as default };
//# sourceMappingURL=ForgotPassword-a565fa91.js.map
