import React__default, { useState } from 'react';
import { u as useForm, F as Form, H as HeaderText, S as Spacer, E as EmailInput, a as SubmitButton, b as SecondaryButton, I as Input, P as PasswordInput } from './index.esm-189a9937.js';
import { _ as _extends, u as useEasybase } from './index-775190d4.js';
import { s as styled, t as toast } from './Auth-25393280.js';
import { E as ErrorText } from './ErrorText-6391e3af.js';

const SecondaryText = styled.h2(props => _extends({
  fontFamily: "inherit",
  fontSize: 15,
  fontWeight: 300,
  letterSpacing: -.2,
  lineHeight: '20px',
  whiteSpace: 'normal'
}, props.theme.secondaryText ? _extends({}, props.theme.secondaryText) : {}));
function SecondaryText$1 (props) {
  return React__default.createElement(SecondaryText, Object.assign({}, props));
}

function ForgotPassword ({
  setCurrentPage,
  dictionary,
  emailTemplate
}) {
  const [onConfirm, setOnConfirm] = useState(false);
  const [forgottenUsername, setForgottenUsername] = useState();
  const {
    register,
    handleSubmit,
    reset,
    formState: {
      errors,
      isSubmitting
    }
  } = useForm();
  const {
    forgotPassword,
    forgotPasswordConfirm
  } = useEasybase();

  const onSubmit = async formData => {
    if (!formData.email) {
      return;
    }

    const forgotRes = await forgotPassword(formData.email, emailTemplate);

    if (forgotRes.success) {
      setForgottenUsername(formData.email);
      setOnConfirm(true);
      toast.success('Check your email for a verification code');
    } else {
      if (forgotRes.errorCode === "RequestLimitExceeded") {
        toast.error(dictionary.errorRequestLimitExceeded);
      } else if (forgotRes.errorCode === "BadFormat") {
        reset();
        toast.error(dictionary.errorBadInputFormat);
      } else if (forgotRes.errorCode === "NoUserExists") {
        reset();
        toast.error(dictionary.errorNoAccountFound);
      } else {
        reset();
        toast.error('Bad request');
      }
    }
  };

  const onConfirmSubmit = async formData => {
    if (!formData.code || !formData.newPassword || !forgottenUsername) {
      return;
    }

    const forgotConfirmRes = await forgotPasswordConfirm(formData.code, forgottenUsername, formData.newPassword);

    if (forgotConfirmRes.success) {
      setOnConfirm(false);
      setForgottenUsername("");
      setCurrentPage('SignIn');
      toast.success('Password successfully changed');
    } else {
      if (forgotConfirmRes.errorCode === "BadPasswordLength") {
        toast.error(dictionary.errorPasswordTooShort);
      } else if (forgotConfirmRes.errorCode === "BadFormat") {
        reset();
        toast.error(dictionary.errorBadInputFormat);
      } else if (forgotConfirmRes.errorCode === "NoUserExists") {
        reset();
        toast.error(dictionary.errorNoAccountFound);
      } else if (forgotConfirmRes.errorCode === "WrongVerificationCode") {
        toast.error(dictionary.errorWrongVerificationCode);
      } else {
        toast.error('Bad request');
      }
    }
  };

  const passwordReqs = {
    minLength: {
      value: 8,
      message: "Password must be at least 8 characters long"
    },
    maxLength: {
      value: 100,
      message: "Password too long"
    },
    pattern: {
      value: /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{7,}$/gm,
      message: "Must contain a digit and uppercase and lowercase letters"
    }
  };
  const codeReqs = {
    minLength: {
      value: 8,
      message: "Incorrect code length"
    }
  };

  if (!onConfirm) {
    return React__default.createElement(Form, {
      onSubmit: handleSubmit(onSubmit)
    }, React__default.createElement(HeaderText, null, dictionary.forgotPasswordHeader), React__default.createElement(SecondaryText$1, null, dictionary.forgotPasswordSecondaryHeader), React__default.createElement(Spacer, {
      size: "medium"
    }), React__default.createElement(EmailInput, {
      register: () => register("email"),
      label: dictionary.newEmailLabel,
      disabled: isSubmitting
    }), React__default.createElement(Spacer, {
      size: "medium"
    }), React__default.createElement(SubmitButton, {
      disabled: isSubmitting
    }, dictionary.forgotPasswordSubmitButton), React__default.createElement(SecondaryButton, {
      onClick: _ => setCurrentPage("SignIn"),
      disabled: isSubmitting
    }, dictionary.backToSignIn));
  } else {
    var _errors$code, _errors$newPassword;

    return React__default.createElement(Form, {
      onSubmit: handleSubmit(onConfirmSubmit)
    }, React__default.createElement(HeaderText, null, dictionary.forgotPasswordConfirmHeader), React__default.createElement(Spacer, {
      size: "medium"
    }), React__default.createElement(Input, {
      register: () => register("code", codeReqs),
      label: dictionary.codeLabel,
      disabled: isSubmitting
    }), React__default.createElement(ErrorText, {
      value: (_errors$code = errors.code) == null ? void 0 : _errors$code.message
    }), React__default.createElement(Spacer, {
      size: "xlarge"
    }), React__default.createElement(PasswordInput, {
      register: () => register("newPassword", passwordReqs),
      label: dictionary.forgotPasswordConfirmLabel,
      autoComplete: "new-password",
      disabled: isSubmitting
    }), React__default.createElement(ErrorText, {
      value: (_errors$newPassword = errors.newPassword) == null ? void 0 : _errors$newPassword.message
    }), React__default.createElement(Spacer, {
      size: "xlarge"
    }), React__default.createElement(SubmitButton, {
      disabled: isSubmitting
    }, dictionary.forgotPasswordConfirmSubmitButton));
  }
}

export { ForgotPassword as default };
//# sourceMappingURL=ForgotPassword-b6106b69.js.map
