{"version":3,"file":"ForgotPassword-b6106b69.js","sources":["../src/ui/Auth/components/SecondaryText.tsx","../src/ui/Auth/pages/ForgotPassword.tsx"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst SecondaryText = styled.h2(props => ({\n    fontFamily: \"inherit\",\n    fontSize: 15,\n    fontWeight: 300,\n    letterSpacing: -.2,\n    lineHeight: '20px',\n    whiteSpace: 'normal',\n    ...(props.theme.secondaryText ? { ...props.theme.secondaryText } : {})\n}))\n\nexport default function (props: React.HTMLAttributes<HTMLHeadingElement>) {\n    return (\n        <SecondaryText {...props} />\n    )\n}\n","import React, { useState } from 'react';\nimport Form from '../components/Form';\nimport EmailInput from '../components/EmailInput';\nimport HeaderText from '../components/HeaderText';\nimport SecondaryText from '../components/SecondaryText';\nimport SecondaryButton from '../components/SecondaryButton';\nimport SubmitButton from '../components/SubmitButton';\nimport Spacer from '../components/Spacer';\nimport { useForm } from 'react-hook-form';\nimport { IPage } from '../../uiTypes';\nimport toast from 'react-hot-toast';\nimport ErrorText from '../components/ErrorText';\nimport Input from '../components/internal/Input';\nimport PasswordInput from '../components/PasswordInput';\nimport useEasybase from '../../../useEasybase';\n\nexport default function ({ setCurrentPage, dictionary, emailTemplate }: IPage) {\n    const [onConfirm, setOnConfirm] = useState<boolean>(false);\n    const [forgottenUsername, setForgottenUsername] = useState<string | undefined>();\n    const { register, handleSubmit, reset, formState: { errors, isSubmitting } } = useForm();\n    const { forgotPassword, forgotPasswordConfirm } = useEasybase();\n\n    const onSubmit = async (formData: Record<string, string>) => {\n        if (!formData.email) {\n            return;\n        }\n\n        const forgotRes = await forgotPassword(formData.email, emailTemplate);\n        if (forgotRes.success) {\n            setForgottenUsername(formData.email);\n            setOnConfirm(true);\n            toast.success('Check your email for a verification code')\n        } else {\n            if (forgotRes.errorCode === \"RequestLimitExceeded\") {\n                toast.error(dictionary.errorRequestLimitExceeded!);\n            } else if (forgotRes.errorCode === \"BadFormat\") {\n                reset();\n                toast.error(dictionary.errorBadInputFormat!);\n            } else if (forgotRes.errorCode === \"NoUserExists\") {\n                reset();\n                toast.error(dictionary.errorNoAccountFound!);\n            } else {\n                reset();\n                toast.error('Bad request');\n            }\n        }\n    }\n\n    const onConfirmSubmit = async (formData: Record<string, string>) => {\n        if (!formData.code || !formData.newPassword || !forgottenUsername) {\n            return;\n        }\n        const forgotConfirmRes = await forgotPasswordConfirm(formData.code, forgottenUsername, formData.newPassword)\n        if (forgotConfirmRes.success) {\n            setOnConfirm(false);\n            setForgottenUsername(\"\");\n            setCurrentPage('SignIn');\n            toast.success('Password successfully changed')\n        } else {\n            if (forgotConfirmRes.errorCode === \"BadPasswordLength\") {\n                toast.error(dictionary.errorPasswordTooShort!);\n            } else if (forgotConfirmRes.errorCode === \"BadFormat\") {\n                reset();\n                toast.error(dictionary.errorBadInputFormat!);\n            } else if (forgotConfirmRes.errorCode === \"NoUserExists\") {\n                reset();\n                toast.error(dictionary.errorNoAccountFound!);\n            } else if (forgotConfirmRes.errorCode === \"WrongVerificationCode\") {\n                toast.error(dictionary.errorWrongVerificationCode!);\n            } else {\n                toast.error('Bad request');\n            }\n        }\n    }\n\n    const passwordReqs = {\n        minLength: {\n            value: 8,\n            message: \"Password must be at least 8 characters long\"\n        },\n        maxLength: {\n            value: 100,\n            message: \"Password too long\"\n        },\n        pattern: {\n            value: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{7,}$/gm,\n            message: \"Must contain a digit and uppercase and lowercase letters\"\n        }\n    }\n\n    const codeReqs = {\n        minLength: {\n            value: 8,\n            message: \"Incorrect code length\"\n        }\n    }\n\n    if (!onConfirm) {\n        return (\n            <Form onSubmit={handleSubmit(onSubmit)}>\n                <HeaderText>{dictionary.forgotPasswordHeader}</HeaderText>\n                <SecondaryText>{dictionary.forgotPasswordSecondaryHeader}</SecondaryText>\n                <Spacer size=\"medium\" />\n                <EmailInput\n                    register={() => register(\"email\")}\n                    label={dictionary.newEmailLabel}\n                    disabled={isSubmitting}\n                />\n                <Spacer size=\"medium\" />\n                <SubmitButton disabled={isSubmitting}>{dictionary.forgotPasswordSubmitButton}</SubmitButton>\n                <SecondaryButton onClick={_ => setCurrentPage(\"SignIn\")} disabled={isSubmitting}>{dictionary.backToSignIn}</SecondaryButton>\n            </Form>\n        )\n    } else {\n        return (\n            <Form onSubmit={handleSubmit(onConfirmSubmit)}>\n                <HeaderText>{dictionary.forgotPasswordConfirmHeader}</HeaderText>\n                <Spacer size=\"medium\" />\n                <Input\n                    register={() => register(\"code\", codeReqs)}\n                    label={dictionary.codeLabel!}\n                    disabled={isSubmitting}\n                />\n                <ErrorText value={errors.code?.message} />\n                <Spacer size=\"xlarge\" />\n                <PasswordInput\n                    register={() => register(\"newPassword\", passwordReqs)}\n                    label={dictionary.forgotPasswordConfirmLabel}\n                    autoComplete=\"new-password\"\n                    disabled={isSubmitting}\n                />\n                <ErrorText value={errors.newPassword?.message} />\n                <Spacer size=\"xlarge\" />\n                <SubmitButton disabled={isSubmitting}>{dictionary.forgotPasswordConfirmSubmitButton}</SubmitButton>\n            </Form>\n        )\n    }\n}\n"],"names":["SecondaryText","styled","h2","props","fontFamily","fontSize","fontWeight","letterSpacing","lineHeight","whiteSpace","theme","secondaryText","React","setCurrentPage","dictionary","emailTemplate","onConfirm","setOnConfirm","useState","forgottenUsername","setForgottenUsername","register","handleSubmit","reset","formState","errors","isSubmitting","useForm","forgotPassword","forgotPasswordConfirm","useEasybase","onSubmit","formData","email","forgotRes","success","toast","errorCode","error","errorRequestLimitExceeded","errorBadInputFormat","errorNoAccountFound","onConfirmSubmit","code","newPassword","forgotConfirmRes","errorPasswordTooShort","errorWrongVerificationCode","passwordReqs","minLength","value","message","maxLength","pattern","codeReqs","Form","HeaderText","forgotPasswordHeader","forgotPasswordSecondaryHeader","Spacer","size","EmailInput","label","newEmailLabel","disabled","SubmitButton","forgotPasswordSubmitButton","SecondaryButton","onClick","_","backToSignIn","forgotPasswordConfirmHeader","Input","codeLabel","ErrorText","PasswordInput","forgotPasswordConfirmLabel","autoComplete","forgotPasswordConfirmSubmitButton"],"mappings":"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"}