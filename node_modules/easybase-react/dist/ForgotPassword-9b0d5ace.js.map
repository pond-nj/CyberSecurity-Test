{"version":3,"file":"ForgotPassword-9b0d5ace.js","sources":["../src/ui/NativeAuth/pages/ForgotPassword.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { INativePage } from '../../uiTypes';\nimport { Form, HeaderText, View, Input, SpacerXL, SubmitButton, SpacerS, SecondaryButton, ErrorText, SecondaryText, MainView, NoSecondaryButton } from '../components';\n\nconst { useEasybase } = require('easybase-react');\n\nexport default function ({ setCurrentPage, dictionary, toast, emailTemplate }: INativePage) {\n    const [onConfirm, setOnConfirm] = useState<boolean>(false);\n    const [forgottenUsername, setForgottenUsername] = useState<string | undefined>();\n    const { control, handleSubmit, reset, formState: { isSubmitting, errors } } = useForm();\n    const { forgotPassword, forgotPasswordConfirm } = useEasybase();\n\n    const onSubmit = async (formData: Record<string, string>) => {\n        if (!formData.email) {\n            return;\n        }\n\n        const forgotRes = await forgotPassword(formData.email, emailTemplate);\n        if (forgotRes.success) {\n            setForgottenUsername(formData.email);\n            setOnConfirm(true);\n            toast('Check your email for a verification code')\n        } else {\n            if (forgotRes.errorCode === \"RequestLimitExceeded\") {\n                toast(dictionary.errorRequestLimitExceeded!);\n            } else if (forgotRes.errorCode === \"BadFormat\") {\n                reset();\n                toast(dictionary.errorBadInputFormat!);\n            } else if (forgotRes.errorCode === \"NoUserExists\") {\n                reset();\n                toast(dictionary.errorNoAccountFound!);\n            } else {\n                reset();\n                toast('Bad request');\n            }\n        }\n    }\n\n    const onConfirmSubmit = async (formData: Record<string, string>) => {\n        if (!formData.code || !formData.newPassword || !forgottenUsername) {\n            return;\n        }\n        const forgotConfirmRes = await forgotPasswordConfirm(formData.code, forgottenUsername, formData.newPassword)\n        if (forgotConfirmRes.success) {\n            setOnConfirm(false);\n            setForgottenUsername(\"\");\n            setCurrentPage('SignIn');\n            toast('Password successfully changed')\n        } else {\n            if (forgotConfirmRes.errorCode === \"BadPasswordLength\") {\n                toast(dictionary.errorPasswordTooShort!);\n            } else if (forgotConfirmRes.errorCode === \"BadFormat\") {\n                reset();\n                toast(dictionary.errorBadInputFormat!);\n            } else if (forgotConfirmRes.errorCode === \"NoUserExists\") {\n                reset();\n                toast(dictionary.errorNoAccountFound!);\n            } else if (forgotConfirmRes.errorCode === \"WrongVerificationCode\") {\n                toast(dictionary.errorWrongVerificationCode!);\n            } else {\n                toast('Bad request');\n            }\n        }\n    }\n\n    const passwordReqs = {\n        minLength: {\n            value: 8,\n            message: \"Password must be at least 8 characters long\"\n        },\n        maxLength: {\n            value: 100,\n            message: \"Password too long\"\n        },\n        pattern: {\n            value: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{7,}$/gm,\n            message: \"Must contain a digit and uppercase and lowercase letters\"\n        }\n    }\n\n    const codeReqs = {\n        minLength: {\n            value: 8,\n            message: \"Incorrect code length\"\n        }\n    }\n\n    if (!onConfirm) {\n        return (\n            <Form>\n                <HeaderText>{dictionary.forgotPasswordHeader}</HeaderText>\n\n                <MainView>\n                    <SecondaryText>{dictionary.forgotPasswordSecondaryHeader}</SecondaryText>\n                    <SpacerXL />\n                    <Controller\n                        control={control}\n                        render={({ field: { onChange, onBlur, value } }) => (\n                            <Input\n                                onBlur={onBlur}\n                                onChangeText={value => onChange(value)}\n                                value={value}\n                                placeholder={dictionary.newEmailLabel}\n                                editable={!isSubmitting}\n                                keyboardType=\"email-address\"\n                                returnKeyType=\"default\"\n                                autoCompleteType=\"email\"\n                                autoCapitalize=\"none\"\n                            />\n                        )}\n                        name=\"email\"\n                        defaultValue=\"\"\n                    />\n                </MainView>\n\n                <View>\n                    <SubmitButton onPress={handleSubmit(onSubmit)} disabled={isSubmitting} title={dictionary.forgotPasswordSubmitButton} />\n                    <SpacerS />\n                    <SecondaryButton onPress={(_: any) => setCurrentPage(\"SignIn\")} disabled={isSubmitting} title={dictionary.backToSignIn} />\n                </View>\n            </Form>\n        )\n    } else {\n        return (\n            <Form>\n                <HeaderText>{dictionary.forgotPasswordConfirmHeader}</HeaderText>\n\n                <MainView>\n                    <Controller\n                        control={control}\n                        render={({ field: { onChange, onBlur, value } }) => (\n                            <Input\n                                onBlur={onBlur}\n                                onChangeText={value => onChange(value)}\n                                value={value}\n                                placeholder={dictionary.codeLabel}\n                                editable={!isSubmitting}\n                                returnKeyType=\"default\"\n                                autoCapitalize=\"characters\"\n                            />\n                        )}\n                        name=\"code\"\n                        defaultValue=\"\"\n                        rules={codeReqs}\n                    />\n                    <ErrorText value={errors.code?.message} />\n                    <SpacerXL />\n                    <Controller\n                        control={control}\n                        render={({ field: { onChange, onBlur, value } }) => (\n                            <Input\n                                onBlur={onBlur}\n                                onChangeText={value => onChange(value)}\n                                value={value}\n                                placeholder={dictionary.forgotPasswordConfirmLabel}\n                                editable={!isSubmitting}\n                                returnKeyType=\"default\"\n                                secureTextEntry={true}\n                                autoCompleteType=\"password\"\n                                autoCapitalize=\"none\"\n                            />\n                        )}\n                        name=\"newPassword\"\n                        defaultValue=\"\"\n                        rules={passwordReqs}\n                    />\n                    <ErrorText value={errors.newPassword?.message} />\n                </MainView>\n                \n                <View>\n                    <SubmitButton onPress={handleSubmit(onConfirmSubmit)} disabled={isSubmitting} title={dictionary.forgotPasswordConfirmSubmitButton} />\n                    <SpacerS />\n                    <NoSecondaryButton />\n                </View>\n            </Form>\n        )\n    }\n}\n"],"names":["require","useEasybase","setCurrentPage","dictionary","toast","emailTemplate","useState","onConfirm","setOnConfirm","forgottenUsername","setForgottenUsername","useForm","control","handleSubmit","reset","formState","isSubmitting","errors","forgotPassword","forgotPasswordConfirm","onSubmit","formData","email","forgotRes","success","errorCode","errorRequestLimitExceeded","errorBadInputFormat","errorNoAccountFound","onConfirmSubmit","code","newPassword","forgotConfirmRes","errorPasswordTooShort","errorWrongVerificationCode","passwordReqs","minLength","value","message","maxLength","pattern","codeReqs","React","Form","HeaderText","forgotPasswordHeader","MainView","SecondaryText","forgotPasswordSecondaryHeader","SpacerXL","Controller","render","field","onChange","onBlur","Input","onChangeText","placeholder","newEmailLabel","editable","keyboardType","returnKeyType","autoCompleteType","autoCapitalize","name","defaultValue","View","SubmitButton","onPress","disabled","title","forgotPasswordSubmitButton","SpacerS","SecondaryButton","_","backToSignIn","forgotPasswordConfirmHeader","codeLabel","rules","ErrorText","forgotPasswordConfirmLabel","secureTextEntry","forgotPasswordConfirmSubmitButton","NoSecondaryButton"],"mappings":"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"}