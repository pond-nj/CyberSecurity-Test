import React__default, { Fragment } from 'react';
import { L as Label, u as useForm, F as Form, H as HeaderText, S as Spacer, E as EmailInput, I as Input, P as PasswordInput, a as SubmitButton, b as SecondaryButton } from './index.esm-189a9937.js';
import { E as ErrorText } from './ErrorText-6391e3af.js';
import { _ as _extends, u as useEasybase } from './index-775190d4.js';
import { s as styled, t as toast } from './Auth-25393280.js';

const SelectContainer = styled.div({
  position: 'relative',
  display: 'inline',
  width: '100%',
  maxWidth: '100%',
  cursor: 'pointer',
  '&:after': {
    content: "''",
    width: 0,
    height: 0,
    position: 'absolute',
    pointerEvents: 'none',
    top: '.3em',
    right: '.75em',
    borderTop: '8px solid black',
    opacity: 0.5,
    borderLeft: '5px solid transparent',
    borderRight: '5px solid transparent'
  }
});
const Select = styled.select({
  WebkitAppearance: 'none',
  MozAppearance: 'none',
  appearance: 'none',
  padding: '1em 2em 1em 1em',
  border: 'none',
  width: '100%',
  fontFamily: 'inherit',
  fontSize: 'inherit',
  cursor: 'pointer',
  outline: 'none',
  '&::-ms-expand': {
    display: 'none'
  }
});
const SelectOption = styled.option(props => _extends({
  width: '100%'
}, props.theme.selectOption ? _extends({}, props.theme.selectOption) : {}));
function Select$1 (props) {
  return React__default.createElement(SelectContainer, null, React__default.createElement(Select, Object.assign({}, props, props.register(), {
    defaultValue: ""
  }), React__default.createElement(SelectOption, {
    key: "empty-option",
    value: "",
    disabled: true,
    hidden: true,
    style: {
      display: 'none'
    }
  }), props.options.map(e => React__default.createElement(SelectOption, {
    key: "option" + e
  }, e))));
}

const GenderSelect = styled(Select$1)(props => _extends({
  boxSizing: "border-box"
}, props.theme.genderSelect ? _extends({}, props.theme.genderSelect) : {}));
const Root = styled.div({
  position: "relative"
});
const GenderLabel = styled(Label)(props => _extends({}, props.theme.genderSelectLabel ? _extends({}, props.theme.genderSelectLabel) : {}));
function GenderSelect$1 (props) {
  return React__default.createElement(Root, null, React__default.createElement(GenderLabel, {
    htmlFor: "select-gender"
  }, "Gender *"), React__default.createElement(GenderSelect, Object.assign({
    id: "select-gender"
  }, props, {
    options: ["Male", "Female", "Prefer not to say"]
  })));
}

function SignUp ({
  setCurrentPage,
  dictionary,
  signUpFields
}) {
  var _errors$firstName, _errors$lastName, _errors$fullName, _errors$dateOfBirth, _errors$gender, _errors$phoneNumber, _errors$password, _errors$passwordConfi;

  const {
    register,
    handleSubmit,
    formState: {
      errors,
      isSubmitting
    },
    reset
  } = useForm();
  const {
    signUp,
    signIn
  } = useEasybase();

  const onSubmit = async formData => {
    if (!formData.email || !formData.password || !formData.passwordConfirm) {
      return;
    }

    if (formData.password !== formData.passwordConfirm) {
      toast.error(dictionary.errorPasswordsDoNotMatch);
      reset();
      return;
    }

    const signUpAttrs = {
      createdAt: new Date().toISOString()
    };

    for (const currField of ["firstName", "lastName", "fullName", "dateOfBirth", "gender", "phoneNumber"]) {
      if (signUpFields[currField]) {
        if (formData[currField]) {
          signUpAttrs[currField] = "" + formData[currField];
        } else {
          toast.error("Missing sign up field value");
          return;
        }
      }
    }

    const signUpRes = await signUp(formData.email, formData.password, signUpAttrs);

    if (signUpRes.success) {
      setCurrentPage("SignIn");
      await signIn(formData.email, formData.password);
    } else {
      if (signUpRes.errorCode === "BadFormat") {
        reset();
        toast.error(dictionary.errorBadInputFormat);
      } else if (signUpRes.errorCode === "BadPasswordLength") {
        toast.error(dictionary.errorPasswordTooShort);
      } else if (signUpRes.errorCode === "UserExists") {
        reset();
        toast.error(dictionary.errorUserAlreadyExists);
      }
    }
  };

  const passwordReqs = {
    minLength: {
      value: 8,
      message: "Password must be at least 8 characters long"
    },
    maxLength: {
      value: 100,
      message: "Password too long"
    },
    pattern: {
      value: /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{7,}$/gm,
      message: "Must contain a digit and uppercase and lowercase letters"
    }
  };
  return React__default.createElement(Form, {
    onSubmit: handleSubmit(onSubmit)
  }, React__default.createElement(HeaderText, null, dictionary.signUpHeader), React__default.createElement(Spacer, {
    size: "medium"
  }), React__default.createElement(EmailInput, {
    register: () => register("email"),
    label: dictionary.newEmailLabel,
    disabled: isSubmitting
  }), signUpFields.firstName && React__default.createElement(Fragment, null, React__default.createElement(Spacer, {
    size: "xlarge"
  }), React__default.createElement(Input, {
    register: () => register("firstName", typeof signUpFields.firstName === "boolean" ? {} : signUpFields.firstName),
    label: dictionary.newFirstNameLabel || "",
    disabled: isSubmitting
  }), React__default.createElement(ErrorText, {
    value: (_errors$firstName = errors.firstName) == null ? void 0 : _errors$firstName.message
  })), signUpFields.lastName && React__default.createElement(Fragment, null, React__default.createElement(Spacer, {
    size: "xlarge"
  }), React__default.createElement(Input, {
    register: () => register("lastName", typeof signUpFields.lastName === "boolean" ? {} : signUpFields.lastName),
    label: dictionary.newLastNameLabel || "",
    disabled: isSubmitting
  }), React__default.createElement(ErrorText, {
    value: (_errors$lastName = errors.lastName) == null ? void 0 : _errors$lastName.message
  })), signUpFields.fullName && React__default.createElement(Fragment, null, React__default.createElement(Spacer, {
    size: "xlarge"
  }), React__default.createElement(Input, {
    register: () => register("fullName", typeof signUpFields.fullName === "boolean" ? {} : signUpFields.fullName),
    label: dictionary.newFullNameLabel || "",
    disabled: isSubmitting
  }), React__default.createElement(ErrorText, {
    value: (_errors$fullName = errors.fullName) == null ? void 0 : _errors$fullName.message
  })), signUpFields.dateOfBirth && React__default.createElement(Fragment, null, React__default.createElement(Spacer, {
    size: "xlarge"
  }), React__default.createElement(Input, {
    type: "date",
    register: () => register("dateOfBirth", typeof signUpFields.dateOfBirth === "boolean" ? {} : signUpFields.dateOfBirth),
    label: dictionary.newDateOfBirthLabel || "",
    disabled: isSubmitting,
    style: {
      overflow: "hidden"
    }
  }), React__default.createElement(ErrorText, {
    value: (_errors$dateOfBirth = errors.dateOfBirth) == null ? void 0 : _errors$dateOfBirth.message
  })), signUpFields.gender && React__default.createElement(Fragment, null, React__default.createElement(Spacer, {
    size: "xlarge"
  }), React__default.createElement(GenderSelect$1, {
    register: () => register("gender", typeof signUpFields.gender === "boolean" ? {} : signUpFields.gender),
    disabled: isSubmitting
  }), React__default.createElement(ErrorText, {
    value: (_errors$gender = errors.gender) == null ? void 0 : _errors$gender.message
  })), signUpFields.phoneNumber && React__default.createElement(Fragment, null, React__default.createElement(Spacer, {
    size: "xlarge"
  }), React__default.createElement(Input, {
    type: "tel",
    label: dictionary.newPhoneNumberLabel || "",
    register: () => register("phoneNumber", typeof signUpFields.phoneNumber === "boolean" ? {} : signUpFields.phoneNumber),
    disabled: isSubmitting
  }), React__default.createElement(ErrorText, {
    value: (_errors$phoneNumber = errors.phoneNumber) == null ? void 0 : _errors$phoneNumber.message
  })), React__default.createElement(Spacer, {
    size: "xlarge"
  }), React__default.createElement(PasswordInput, {
    register: () => register("password", passwordReqs),
    label: dictionary.newPasswordLabel,
    autoComplete: "new-password",
    disabled: isSubmitting
  }), React__default.createElement(ErrorText, {
    value: (_errors$password = errors.password) == null ? void 0 : _errors$password.message
  }), React__default.createElement(Spacer, {
    size: "xlarge"
  }), React__default.createElement(PasswordInput, {
    register: () => register("passwordConfirm", passwordReqs),
    label: dictionary.confirmNewPasswordLabel,
    autoComplete: "new-password",
    disabled: isSubmitting
  }), React__default.createElement(ErrorText, {
    value: (_errors$passwordConfi = errors.passwordConfirm) == null ? void 0 : _errors$passwordConfi.message
  }), React__default.createElement(Spacer, {
    size: "xlarge"
  }), React__default.createElement(SubmitButton, {
    disabled: isSubmitting
  }, dictionary.signUpSubmitButton), React__default.createElement(SecondaryButton, {
    onClick: _ => setCurrentPage("SignIn"),
    disabled: isSubmitting
  }, dictionary.backToSignIn));
}

export { SignUp as default };
//# sourceMappingURL=SignUp-a3e46665.js.map
