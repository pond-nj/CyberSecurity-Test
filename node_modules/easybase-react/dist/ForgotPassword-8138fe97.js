var React = require('react');
var index_esm = require('./index.esm-f4de5e43.js');
var index = require('./index-04d24c4d.js');
var Auth = require('./Auth-dec80812.js');
var ErrorText = require('./ErrorText-cd09e474.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var SecondaryText = Auth.styled.h2(function (props) {
  return index._extends({
    fontFamily: "inherit",
    fontSize: 15,
    fontWeight: 300,
    letterSpacing: -.2,
    lineHeight: '20px',
    whiteSpace: 'normal'
  }, props.theme.secondaryText ? index._extends({}, props.theme.secondaryText) : {});
});
function SecondaryText$1 (props) {
  return React__default["default"].createElement(SecondaryText, Object.assign({}, props));
}

function ForgotPassword (_ref) {
  var setCurrentPage = _ref.setCurrentPage,
      dictionary = _ref.dictionary,
      emailTemplate = _ref.emailTemplate;

  var _useState = React.useState(false),
      onConfirm = _useState[0],
      setOnConfirm = _useState[1];

  var _useState2 = React.useState(),
      forgottenUsername = _useState2[0],
      setForgottenUsername = _useState2[1];

  var _useForm = index_esm.useForm(),
      _register = _useForm.register,
      handleSubmit = _useForm.handleSubmit,
      reset = _useForm.reset,
      _useForm$formState = _useForm.formState,
      errors = _useForm$formState.errors,
      isSubmitting = _useForm$formState.isSubmitting;

  var _useEasybase = index.useEasybase(),
      forgotPassword = _useEasybase.forgotPassword,
      forgotPasswordConfirm = _useEasybase.forgotPasswordConfirm;

  var onSubmit = function onSubmit(formData) {
    try {
      if (!formData.email) {
        return Promise.resolve();
      }

      return Promise.resolve(forgotPassword(formData.email, emailTemplate)).then(function (forgotRes) {
        if (forgotRes.success) {
          setForgottenUsername(formData.email);
          setOnConfirm(true);
          Auth.toast.success('Check your email for a verification code');
        } else {
          if (forgotRes.errorCode === "RequestLimitExceeded") {
            Auth.toast.error(dictionary.errorRequestLimitExceeded);
          } else if (forgotRes.errorCode === "BadFormat") {
            reset();
            Auth.toast.error(dictionary.errorBadInputFormat);
          } else if (forgotRes.errorCode === "NoUserExists") {
            reset();
            Auth.toast.error(dictionary.errorNoAccountFound);
          } else {
            reset();
            Auth.toast.error('Bad request');
          }
        }
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  var onConfirmSubmit = function onConfirmSubmit(formData) {
    try {
      if (!formData.code || !formData.newPassword || !forgottenUsername) {
        return Promise.resolve();
      }

      return Promise.resolve(forgotPasswordConfirm(formData.code, forgottenUsername, formData.newPassword)).then(function (forgotConfirmRes) {
        if (forgotConfirmRes.success) {
          setOnConfirm(false);
          setForgottenUsername("");
          setCurrentPage('SignIn');
          Auth.toast.success('Password successfully changed');
        } else {
          if (forgotConfirmRes.errorCode === "BadPasswordLength") {
            Auth.toast.error(dictionary.errorPasswordTooShort);
          } else if (forgotConfirmRes.errorCode === "BadFormat") {
            reset();
            Auth.toast.error(dictionary.errorBadInputFormat);
          } else if (forgotConfirmRes.errorCode === "NoUserExists") {
            reset();
            Auth.toast.error(dictionary.errorNoAccountFound);
          } else if (forgotConfirmRes.errorCode === "WrongVerificationCode") {
            Auth.toast.error(dictionary.errorWrongVerificationCode);
          } else {
            Auth.toast.error('Bad request');
          }
        }
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  var passwordReqs = {
    minLength: {
      value: 8,
      message: "Password must be at least 8 characters long"
    },
    maxLength: {
      value: 100,
      message: "Password too long"
    },
    pattern: {
      value: /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{7,}$/gm,
      message: "Must contain a digit and uppercase and lowercase letters"
    }
  };
  var codeReqs = {
    minLength: {
      value: 8,
      message: "Incorrect code length"
    }
  };

  if (!onConfirm) {
    return React__default["default"].createElement(index_esm.Form, {
      onSubmit: handleSubmit(onSubmit)
    }, React__default["default"].createElement(index_esm.HeaderText, null, dictionary.forgotPasswordHeader), React__default["default"].createElement(SecondaryText$1, null, dictionary.forgotPasswordSecondaryHeader), React__default["default"].createElement(index_esm.Spacer, {
      size: "medium"
    }), React__default["default"].createElement(index_esm.EmailInput, {
      register: function register() {
        return _register("email");
      },
      label: dictionary.newEmailLabel,
      disabled: isSubmitting
    }), React__default["default"].createElement(index_esm.Spacer, {
      size: "medium"
    }), React__default["default"].createElement(index_esm.SubmitButton, {
      disabled: isSubmitting
    }, dictionary.forgotPasswordSubmitButton), React__default["default"].createElement(index_esm.SecondaryButton, {
      onClick: function onClick(_) {
        return setCurrentPage("SignIn");
      },
      disabled: isSubmitting
    }, dictionary.backToSignIn));
  } else {
    var _errors$code, _errors$newPassword;

    return React__default["default"].createElement(index_esm.Form, {
      onSubmit: handleSubmit(onConfirmSubmit)
    }, React__default["default"].createElement(index_esm.HeaderText, null, dictionary.forgotPasswordConfirmHeader), React__default["default"].createElement(index_esm.Spacer, {
      size: "medium"
    }), React__default["default"].createElement(index_esm.Input, {
      register: function register() {
        return _register("code", codeReqs);
      },
      label: dictionary.codeLabel,
      disabled: isSubmitting
    }), React__default["default"].createElement(ErrorText.ErrorText, {
      value: (_errors$code = errors.code) == null ? void 0 : _errors$code.message
    }), React__default["default"].createElement(index_esm.Spacer, {
      size: "xlarge"
    }), React__default["default"].createElement(index_esm.PasswordInput, {
      register: function register() {
        return _register("newPassword", passwordReqs);
      },
      label: dictionary.forgotPasswordConfirmLabel,
      autoComplete: "new-password",
      disabled: isSubmitting
    }), React__default["default"].createElement(ErrorText.ErrorText, {
      value: (_errors$newPassword = errors.newPassword) == null ? void 0 : _errors$newPassword.message
    }), React__default["default"].createElement(index_esm.Spacer, {
      size: "xlarge"
    }), React__default["default"].createElement(index_esm.SubmitButton, {
      disabled: isSubmitting
    }, dictionary.forgotPasswordConfirmSubmitButton));
  }
}

exports["default"] = ForgotPassword;
//# sourceMappingURL=ForgotPassword-8138fe97.js.map
