var React = require('react');
var index_esm = require('./index.esm-264e892f.js');
var NativeAuth = require('./NativeAuth-528322b5.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var _require = require('easybase-react'),
    useEasybase = _require.useEasybase;

function ForgotPassword (_ref) {
  var setCurrentPage = _ref.setCurrentPage,
      dictionary = _ref.dictionary,
      toast = _ref.toast,
      emailTemplate = _ref.emailTemplate;

  var _useState = React.useState(false),
      onConfirm = _useState[0],
      setOnConfirm = _useState[1];

  var _useState2 = React.useState(),
      forgottenUsername = _useState2[0],
      setForgottenUsername = _useState2[1];

  var _useForm = index_esm.useForm(),
      control = _useForm.control,
      handleSubmit = _useForm.handleSubmit,
      reset = _useForm.reset,
      _useForm$formState = _useForm.formState,
      isSubmitting = _useForm$formState.isSubmitting,
      errors = _useForm$formState.errors;

  var _useEasybase = useEasybase(),
      forgotPassword = _useEasybase.forgotPassword,
      forgotPasswordConfirm = _useEasybase.forgotPasswordConfirm;

  var onSubmit = function onSubmit(formData) {
    try {
      if (!formData.email) {
        return Promise.resolve();
      }

      return Promise.resolve(forgotPassword(formData.email, emailTemplate)).then(function (forgotRes) {
        if (forgotRes.success) {
          setForgottenUsername(formData.email);
          setOnConfirm(true);
          toast('Check your email for a verification code');
        } else {
          if (forgotRes.errorCode === "RequestLimitExceeded") {
            toast(dictionary.errorRequestLimitExceeded);
          } else if (forgotRes.errorCode === "BadFormat") {
            reset();
            toast(dictionary.errorBadInputFormat);
          } else if (forgotRes.errorCode === "NoUserExists") {
            reset();
            toast(dictionary.errorNoAccountFound);
          } else {
            reset();
            toast('Bad request');
          }
        }
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  var onConfirmSubmit = function onConfirmSubmit(formData) {
    try {
      if (!formData.code || !formData.newPassword || !forgottenUsername) {
        return Promise.resolve();
      }

      return Promise.resolve(forgotPasswordConfirm(formData.code, forgottenUsername, formData.newPassword)).then(function (forgotConfirmRes) {
        if (forgotConfirmRes.success) {
          setOnConfirm(false);
          setForgottenUsername("");
          setCurrentPage('SignIn');
          toast('Password successfully changed');
        } else {
          if (forgotConfirmRes.errorCode === "BadPasswordLength") {
            toast(dictionary.errorPasswordTooShort);
          } else if (forgotConfirmRes.errorCode === "BadFormat") {
            reset();
            toast(dictionary.errorBadInputFormat);
          } else if (forgotConfirmRes.errorCode === "NoUserExists") {
            reset();
            toast(dictionary.errorNoAccountFound);
          } else if (forgotConfirmRes.errorCode === "WrongVerificationCode") {
            toast(dictionary.errorWrongVerificationCode);
          } else {
            toast('Bad request');
          }
        }
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  var passwordReqs = {
    minLength: {
      value: 8,
      message: "Password must be at least 8 characters long"
    },
    maxLength: {
      value: 100,
      message: "Password too long"
    },
    pattern: {
      value: /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{7,}$/gm,
      message: "Must contain a digit and uppercase and lowercase letters"
    }
  };
  var codeReqs = {
    minLength: {
      value: 8,
      message: "Incorrect code length"
    }
  };

  if (!onConfirm) {
    return React__default["default"].createElement(NativeAuth.Form, null, React__default["default"].createElement(NativeAuth.HeaderText, null, dictionary.forgotPasswordHeader), React__default["default"].createElement(NativeAuth.MainView, null, React__default["default"].createElement(NativeAuth.SecondaryText, null, dictionary.forgotPasswordSecondaryHeader), React__default["default"].createElement(NativeAuth.SpacerXL, null), React__default["default"].createElement(index_esm.Controller, {
      control: control,
      render: function render(_ref2) {
        var _ref2$field = _ref2.field,
            onChange = _ref2$field.onChange,
            onBlur = _ref2$field.onBlur,
            value = _ref2$field.value;
        return React__default["default"].createElement(NativeAuth.Input, {
          onBlur: onBlur,
          onChangeText: function onChangeText(value) {
            return onChange(value);
          },
          value: value,
          placeholder: dictionary.newEmailLabel,
          editable: !isSubmitting,
          keyboardType: "email-address",
          returnKeyType: "default",
          autoCompleteType: "email",
          autoCapitalize: "none"
        });
      },
      name: "email",
      defaultValue: ""
    })), React__default["default"].createElement(NativeAuth.View, null, React__default["default"].createElement(NativeAuth.SubmitButton, {
      onPress: handleSubmit(onSubmit),
      disabled: isSubmitting,
      title: dictionary.forgotPasswordSubmitButton
    }), React__default["default"].createElement(NativeAuth.SpacerS, null), React__default["default"].createElement(NativeAuth.SecondaryButton, {
      onPress: function onPress(_) {
        return setCurrentPage("SignIn");
      },
      disabled: isSubmitting,
      title: dictionary.backToSignIn
    })));
  } else {
    var _errors$code, _errors$newPassword;

    return React__default["default"].createElement(NativeAuth.Form, null, React__default["default"].createElement(NativeAuth.HeaderText, null, dictionary.forgotPasswordConfirmHeader), React__default["default"].createElement(NativeAuth.MainView, null, React__default["default"].createElement(index_esm.Controller, {
      control: control,
      render: function render(_ref3) {
        var _ref3$field = _ref3.field,
            onChange = _ref3$field.onChange,
            onBlur = _ref3$field.onBlur,
            value = _ref3$field.value;
        return React__default["default"].createElement(NativeAuth.Input, {
          onBlur: onBlur,
          onChangeText: function onChangeText(value) {
            return onChange(value);
          },
          value: value,
          placeholder: dictionary.codeLabel,
          editable: !isSubmitting,
          returnKeyType: "default",
          autoCapitalize: "characters"
        });
      },
      name: "code",
      defaultValue: "",
      rules: codeReqs
    }), React__default["default"].createElement(NativeAuth.ErrorText, {
      value: (_errors$code = errors.code) == null ? void 0 : _errors$code.message
    }), React__default["default"].createElement(NativeAuth.SpacerXL, null), React__default["default"].createElement(index_esm.Controller, {
      control: control,
      render: function render(_ref4) {
        var _ref4$field = _ref4.field,
            onChange = _ref4$field.onChange,
            onBlur = _ref4$field.onBlur,
            value = _ref4$field.value;
        return React__default["default"].createElement(NativeAuth.Input, {
          onBlur: onBlur,
          onChangeText: function onChangeText(value) {
            return onChange(value);
          },
          value: value,
          placeholder: dictionary.forgotPasswordConfirmLabel,
          editable: !isSubmitting,
          returnKeyType: "default",
          secureTextEntry: true,
          autoCompleteType: "password",
          autoCapitalize: "none"
        });
      },
      name: "newPassword",
      defaultValue: "",
      rules: passwordReqs
    }), React__default["default"].createElement(NativeAuth.ErrorText, {
      value: (_errors$newPassword = errors.newPassword) == null ? void 0 : _errors$newPassword.message
    })), React__default["default"].createElement(NativeAuth.View, null, React__default["default"].createElement(NativeAuth.SubmitButton, {
      onPress: handleSubmit(onConfirmSubmit),
      disabled: isSubmitting,
      title: dictionary.forgotPasswordConfirmSubmitButton
    }), React__default["default"].createElement(NativeAuth.SpacerS, null), React__default["default"].createElement(NativeAuth.NoSecondaryButton, null)));
  }
}

exports["default"] = ForgotPassword;
//# sourceMappingURL=ForgotPassword-9b0d5ace.js.map
