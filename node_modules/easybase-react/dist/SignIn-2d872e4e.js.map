{"version":3,"file":"SignIn-2d872e4e.js","sources":["../src/ui/NativeAuth/pages/SignIn.tsx"],"sourcesContent":["import React from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { INativePage } from '../../uiTypes';\nimport { Form, HeaderText, View, Input, SubmitButton, SecondaryButton, ForgotPassword, SpacerS, SpacerXL, MainView } from '../components';\n\nconst { useEasybase } = require('easybase-react');\n\nexport default function ({ setCurrentPage, dictionary, toast }: INativePage) {\n    const { control, handleSubmit, reset, formState: { isSubmitting } } = useForm();\n    const { signIn } = useEasybase();\n\n    const onSubmit = async (formData: Record<string, string>) => {\n        if (!formData.email || !formData.password) {\n            return;\n        }\n        \n        const signInRes = await signIn(formData.email, formData.password);\n        if (!signInRes.success) {\n            if (signInRes.errorCode === \"NoUserExists\") {\n                toast(dictionary.errorUserDoesNotExist!)\n            } else if (signInRes.errorCode === \"BadFormat\") {\n                reset();\n                toast(dictionary.errorBadInputFormat!)\n            }\n        }\n        // Will automatically change views\n    }\n\n    return (\n        <Form>\n            <HeaderText>{dictionary.signInHeader}</HeaderText>\n\n            <MainView>\n                <Controller\n                    control={control}\n                    render={({ field: { onChange, onBlur, value } }) => (\n                        <Input\n                            onBlur={onBlur}\n                            onChangeText={value => onChange(value)}\n                            value={value}\n                            placeholder={dictionary.emailLabel}\n                            editable={!isSubmitting}\n                            keyboardType=\"email-address\"\n                            returnKeyType=\"default\"\n                            autoCompleteType=\"email\"\n                            autoCapitalize=\"none\"\n                        />\n                    )}\n                    name=\"email\"\n                    defaultValue=\"\"\n                />\n                <SpacerXL />\n                <Controller\n                    control={control}\n                    render={({ field: { onChange, onBlur, value } }) => (\n                        <Input\n                            onBlur={onBlur}\n                            onChangeText={value => onChange(value)}\n                            value={value}\n                            placeholder={dictionary.passwordLabel}\n                            editable={!isSubmitting}\n                            returnKeyType=\"default\"\n                            secureTextEntry={true}\n                            autoCompleteType=\"password\"\n                            autoCapitalize=\"none\"\n                        />\n                    )}\n                    name=\"password\"\n                    defaultValue=\"\"\n                />\n                <ForgotPassword onPress={(_: any) => setCurrentPage(\"ForgotPassword\")} disabled={isSubmitting} title={dictionary.forgotPasswordButton!} />\n            </MainView>\n\n            <View>\n                <SubmitButton onPress={handleSubmit(onSubmit)} disabled={isSubmitting} title={dictionary.signInSubmitButton} />\n                <SpacerS />\n                <SecondaryButton onPress={(_: any) => setCurrentPage(\"SignUp\")} disabled={isSubmitting} title={dictionary.noAccountButton!} />\n            </View>\n        </Form>\n    )\n}\n"],"names":["require","useEasybase","setCurrentPage","dictionary","toast","useForm","control","handleSubmit","reset","isSubmitting","formState","signIn","onSubmit","formData","email","password","signInRes","success","errorCode","errorUserDoesNotExist","errorBadInputFormat","React","Form","HeaderText","signInHeader","MainView","Controller","render","field","onChange","onBlur","value","Input","onChangeText","placeholder","emailLabel","editable","keyboardType","returnKeyType","autoCompleteType","autoCapitalize","name","defaultValue","SpacerXL","passwordLabel","secureTextEntry","ForgotPassword","onPress","_","disabled","title","forgotPasswordButton","View","SubmitButton","signInSubmitButton","SpacerS","SecondaryButton","noAccountButton"],"mappings":"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"}