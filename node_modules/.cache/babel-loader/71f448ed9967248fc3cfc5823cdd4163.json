{"ast":null,"code":"var _jsxFileName = \"/Users/nutdranai.jaruthikorn/Desktop/itsc/p-nurse-quiz/src/App.js\";\nimport Header from './Header';\nimport Instruction from './Instruction';\nimport Question from './Question';\nimport React from 'react';\nimport axios from 'axios'; //import './App.css';\n\nimport XMLData from './xml/mc0.xml'; //import './arrangeprotein.css'\n//import './bootstrap.min.css'\n//import './jquery.mobile-1.4.0.css'\n\nimport './mcstyle.css'; //import './quiz.css'\n//import './style.css'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setSubmit = state => {\n      this.setState({\n        pressSubmit: state\n      });\n    };\n\n    this.resetSelected = () => {\n      this.setState({\n        correct: null,\n        selectedAnswer: -1,\n        pressSubmit: 0\n      });\n    };\n\n    this.goToNextQuestion = () => {\n      this.setState({\n        questionNum: this.state.questionNum + 1,\n        correct: null,\n        selectedAnswer: -1,\n        pressSubmit: 0\n      });\n    };\n\n    this.goToPrevQuestion = () => {\n      this.setState({\n        questionNum: this.state.questionNum - 1,\n        correct: null,\n        selectedAnswer: -1,\n        pressSubmit: 0\n      });\n    };\n\n    this.setCorrect = state => {\n      this.setState({\n        correct: state\n      });\n    };\n\n    this.setSelectedAnswer = answer => {\n      this.setState({\n        selectedAnswer: answer,\n        pressSubmit: 0\n      });\n    };\n\n    this.state = {\n      isFetched: false,\n      //isFetched is reset everytime a new component is updated\n      questions: [],\n      start: -1,\n      questionNum: -1,\n      questionTexts: [],\n      answers: [],\n      selectedAnswer: -1,\n      correct: null,\n      pressSubmit: 0\n    };\n  }\n\n  componentDidMount() {\n    this.fetchQuestionsWithAxios();\n  }\n\n  fetchQuestionsWithAxios() {\n    axios.get(XMLData, {\n      \"Content-Type\": \"application/xml; charset=utf-8\"\n    }).then(response => {\n      const parser = new DOMParser();\n      var xml = parser.parseFromString(response.data, \"text/xml\");\n      var questions = Array.from(xml.getElementsByTagName(\"question\"));\n      var answers = Array.from(xml.getElementsByTagName(\"answer\")); //answers should be an array of <answer>\n\n      this.setState({\n        questions: questions,\n        answers: answers //isFetched:true\n\n      });\n    }).catch(e => {\n      console.log(e); //this.setState({ isFetched: false })\n    });\n  }\n\n  render() {\n    //console.log( this.state )\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"wrapper\",\n        \"data-role\": \"content\",\n        children: [/*#__PURE__*/_jsxDEV(Instruction, {\n          questionNum: this.state.questionNum,\n          goToNextQuestion: this.goToNextQuestion\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Question, {\n          questionNum: this.state.questionNum,\n          questions: this.state.questions //isFetched={this.state.isFetched}\n          ,\n          choices: this.state.answers.filter((_, index) => {\n            return this.state.questionNum * 4 <= index && index <= this.state.questionNum * 4 + 3;\n          }),\n          goToNextQuestion: this.goToNextQuestion,\n          goToPrevQuestion: this.goToPrevQuestion,\n          setSelectedAnswer: this.setSelectedAnswer,\n          selectedAnswer: this.state.selectedAnswer,\n          setCorrect: this.setCorrect,\n          correct: this.state.correct,\n          pressSubmit: this.state.pressSubmit,\n          setSubmit: this.setSubmit,\n          resetSelected: this.resetSelected\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/nutdranai.jaruthikorn/Desktop/itsc/p-nurse-quiz/src/App.js"],"names":["Header","Instruction","Question","React","axios","XMLData","App","Component","constructor","props","setSubmit","state","setState","pressSubmit","resetSelected","correct","selectedAnswer","goToNextQuestion","questionNum","goToPrevQuestion","setCorrect","setSelectedAnswer","answer","isFetched","questions","start","questionTexts","answers","componentDidMount","fetchQuestionsWithAxios","get","then","response","parser","DOMParser","xml","parseFromString","data","Array","from","getElementsByTagName","catch","e","console","log","render","filter","_","index"],"mappings":"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","sourcesContent":["import Header from './Header'\nimport Instruction from './Instruction'\nimport Question from './Question'\nimport React from 'react'\nimport axios from 'axios'\n\n//import './App.css';\n\nimport XMLData from './xml/mc0.xml'\n//import './arrangeprotein.css'\n//import './bootstrap.min.css'\n//import './jquery.mobile-1.4.0.css'\nimport './mcstyle.css'\n//import './quiz.css'\n//import './style.css'\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props)\n    this.state = {\n      isFetched: false, //isFetched is reset everytime a new component is updated\n      questions: [],\n      start: -1,\n      questionNum: -1,\n      questionTexts: [],\n      answers: [],\n      selectedAnswer: -1,\n      correct: null,\n      pressSubmit: 0\n    }\n  }\n\n  setSubmit = (state) => {\n    this.setState({\n      pressSubmit: state\n    })\n  }\n\n  resetSelected = () => {\n    this.setState({\n      correct: null,\n      selectedAnswer: -1,\n      pressSubmit: 0\n    })\n  }\n\n  goToNextQuestion = () => { \n    this.setState({\n      questionNum : this.state.questionNum + 1,\n      correct: null,\n      selectedAnswer: -1,\n      pressSubmit: 0\n    })\n  }\n\n  goToPrevQuestion = () => { this.setState({\n      questionNum : this.state.questionNum - 1, \n      correct: null,\n      selectedAnswer: -1,\n      pressSubmit: 0\n    })\n  }\n\n  setCorrect = (state) => { this.setState({\n      correct: state })\n  }\n\n  setSelectedAnswer = (answer) => { this.setState({\n      selectedAnswer: answer,\n      pressSubmit: 0\n     })\n  }\n\n  componentDidMount(){\n    this.fetchQuestionsWithAxios()\n  }\n\n  fetchQuestionsWithAxios(){\n    axios.get(XMLData,\n      {\"Content-Type\":\"application/xml; charset=utf-8\"\n    }).then((response)=>{\n      const parser = new DOMParser()\n      var xml = parser.parseFromString(response.data,\"text/xml\")\n\n      var questions = Array.from(xml.getElementsByTagName(\"question\"))\n\n      var answers = Array.from(xml.getElementsByTagName(\"answer\"))\n      //answers should be an array of <answer>\n\n      this.setState({\n          questions: questions,\n          answers: answers,\n          //isFetched:true\n      })\n    }).catch( e => {\n      console.log(e)\n      //this.setState({ isFetched: false })\n    })\n  }\n\n  render(){\n    //console.log( this.state )\n    return (\n      <div className=\"App\">\n        <Header/>\n        <div id =\"wrapper\" data-role=\"content\">\n          <Instruction\n            questionNum={this.state.questionNum}\n            goToNextQuestion={this.goToNextQuestion}/>\n          <Question\n            questionNum={this.state.questionNum}\n            questions={this.state.questions}\n            //isFetched={this.state.isFetched}\n            choices = {this.state.answers.filter( (_ , index) => {\n              return ((this.state.questionNum*4 <= index) && (index <= this.state.questionNum*4 + 3))\n            })}\n            goToNextQuestion={this.goToNextQuestion}\n            goToPrevQuestion={this.goToPrevQuestion}\n            setSelectedAnswer={this.setSelectedAnswer}\n            selectedAnswer={this.state.selectedAnswer}\n            setCorrect={this.setCorrect}\n            correct={this.state.correct}\n            pressSubmit={this.state.pressSubmit}\n            setSubmit={this.setSubmit}\n            resetSelected={this.resetSelected}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}