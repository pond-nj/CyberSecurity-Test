{"ast":null,"code":"var _jsxFileName = \"/Users/nutdranaijaruthikorn/Downloads/2022/itsc/p-nurse-quiz/CyberSecurity-Test/src/App.js\";\nimport Header from './Header';\nimport PageManager from './PageManager';\nimport React from 'react';\nimport axios from 'axios'; // import XMLData from './xml/mc.xml'\n\nimport './mcstyle.css';\n/*\n  Problem:\n\n    change page title\n\n    Responder can comeback to edit choice\n\n    collect survey on user feeling, send data to server\n\n    ## change survey to a new module\n\n    ## change state that's string but is supposed to be int to int\n\n    ## create page manager\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setUserInput = (index, inputText) => {\n      if (index == 0) {\n        this.setState({\n          userIndustry: inputText\n        });\n      } else if (index == 1) {\n        this.setState({\n          userPosition: inputText\n        });\n      } else if (index == 2) {\n        this.setState({\n          userLocation: inputText\n        });\n      } else if (index == 3) {\n        this.setState({\n          userLocation: inputText\n        });\n      }\n    };\n\n    this.setDataSubmit = state => {\n      this.setState({\n        dataSubmit: state\n      });\n    };\n\n    this.updateSurveyResponse = response => {\n      this.setState({\n        surveyResponse: [...this.state.surveyResponse, parseInt(response)]\n      });\n    };\n\n    this.goToNextSurvey = () => {\n      this.setState({\n        surveyNum: this.state.surveyNum + 1,\n        selectedAnswer: -1,\n        pressSubmit: 0\n      });\n    };\n\n    this.skipQuestions = questionNum => {\n      this.setState({\n        questionNum: questionNum\n      });\n    };\n\n    this.setSubmit = state => {\n      this.setState({\n        pressSubmit: state\n      });\n    };\n\n    this.incrementValue = value => {\n      this.setState({\n        value: this.state.value + parseInt(value)\n      });\n    };\n\n    this.setSelectedValue = value => {\n      this.setState({\n        selectedValue: parseInt(value)\n      });\n    };\n\n    this.resetSelected = () => {\n      this.setState({\n        selectedAnswer: -1,\n        pressSubmit: 0\n      });\n    };\n\n    this.goToNextQuestion = () => {\n      this.setState({\n        questionNum: this.state.questionNum + 1,\n        selectedAnswer: -1,\n        pressSubmit: 0\n      });\n    };\n\n    this.setSelectedAnswer = answer => {\n      this.setState({\n        selectedAnswer: parseInt(answer),\n        pressSubmit: 0\n      });\n    };\n\n    this.state = {\n      questionsList: [],\n      feedbackList: [],\n      //xmlnode that contains feedback data\n      surveyList: [],\n      //\n      surveyForm: [],\n      questionNum: -1,\n      //0 to total no. of question-1, 0 is the first question\n      surveyNum: -1,\n      value: 0,\n      surveyResponse: [],\n      //save user's multiple choice response in this array\n      userIndustry: \"\",\n      userPosition: \"\",\n      userLocation: \"\",\n      //save user's text input in this array\n      userComment: \"\",\n      selectedValue: -1,\n      selectedAnswer: -1,\n      pressSubmit: 0,\n      dataSubmit: -1\n    };\n  }\n\n  componentDidMount() {\n    this.fetchQuestionsWithAxios();\n  }\n\n  fetchQuestionsWithAxios() {\n    // axios.get(XMLData,\n    axios.get(\"https://raw.githubusercontent.com/pond-nj/CyberSecurity-Test/main/src/xml/mc.xml\", {\n      \"Content-Type\": \"application/xml; charset=utf-8\"\n    }).then(response => {\n      const parser = new DOMParser();\n      var xml = parser.parseFromString(response.data, \"text/xml\");\n      var questionsList = Array.from(xml.getElementsByTagName(\"question\"));\n      var feedbackList = Array.from(xml.getElementsByTagName(\"feedbacks\"));\n      var surveyList = Array.from(xml.getElementsByTagName(\"surveyText\"));\n      var surveyForm = Array.from(xml.getElementsByTagName(\"surveyForm\"));\n      this.setState({\n        questionsList: questionsList,\n        feedbackList: feedbackList,\n        surveyList: surveyList,\n        surveyForm: surveyForm\n      });\n    }).catch(e => {\n      console.log(e);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"wrapper\",\n        \"data-role\": \"content\",\n        children: /*#__PURE__*/_jsxDEV(PageManager, {\n          questionNum: this.state.questionNum,\n          questionsList: this.state.questionsList,\n          selectedAnswer: this.state.selectedAnswer,\n          selectedValue: this.state.selectedValue,\n          value: this.state.value,\n          pressSubmit: this.state.pressSubmit,\n          totalQuestions: this.state.questionsList.length,\n          feedbackList: this.state.feedbackList,\n          surveyNum: this.state.surveyNum,\n          surveyList: this.state.surveyList,\n          totalSurvey: this.state.surveyList.length,\n          surveyResponse: this.state.surveyResponse,\n          surveyForm: this.state.surveyForm,\n          dataSubmit: this.state.dataSubmit,\n          goToNextQuestion: this.goToNextQuestion // goToPrevQuestion={this.goToPrevQuestion}\n          ,\n          setSelectedAnswer: this.setSelectedAnswer,\n          resetSelected: this.resetSelected,\n          incrementValue: this.incrementValue,\n          setSelectedValue: this.setSelectedValue,\n          setSubmit: this.setSubmit,\n          skipQuestions: this.skipQuestions,\n          goToNextSurvey: this.goToNextSurvey,\n          updateSurveyResponse: this.updateSurveyResponse,\n          setDataSubmit: this.setDataSubmit,\n          setUserTextInput: this.setUserTextInput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/nutdranaijaruthikorn/Downloads/2022/itsc/p-nurse-quiz/CyberSecurity-Test/src/App.js"],"names":["Header","PageManager","React","axios","App","Component","constructor","props","setUserInput","index","inputText","setState","userIndustry","userPosition","userLocation","setDataSubmit","state","dataSubmit","updateSurveyResponse","response","surveyResponse","parseInt","goToNextSurvey","surveyNum","selectedAnswer","pressSubmit","skipQuestions","questionNum","setSubmit","incrementValue","value","setSelectedValue","selectedValue","resetSelected","goToNextQuestion","setSelectedAnswer","answer","questionsList","feedbackList","surveyList","surveyForm","userComment","componentDidMount","fetchQuestionsWithAxios","get","then","parser","DOMParser","xml","parseFromString","data","Array","from","getElementsByTagName","catch","e","console","log","render","length","setUserTextInput"],"mappings":"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","sourcesContent":["import Header from './Header'\nimport PageManager from './PageManager'\nimport React from 'react'\nimport axios from 'axios'\n\n// import XMLData from './xml/mc.xml'\nimport './mcstyle.css'\n\n\n/*\n  Problem:\n\n    change page title\n\n    Responder can comeback to edit choice\n\n    collect survey on user feeling, send data to server\n\n    ## change survey to a new module\n\n    ## change state that's string but is supposed to be int to int\n\n    ## create page manager\n*/\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props)\n    this.state = {\n      questionsList: [],\n      feedbackList: [], //xmlnode that contains feedback data\n      surveyList: [], //\n      surveyForm: [],\n\n      questionNum: -1, //0 to total no. of question-1, 0 is the first question\n      surveyNum: -1,\n      value: 0,\n      surveyResponse: [], //save user's multiple choice response in this array\n      userIndustry: \"\",\n      userPosition: \"\",\n      userLocation: \"\", //save user's text input in this array\n      userComment: \"\",\n\n      selectedValue: -1,\n      selectedAnswer: -1,\n      pressSubmit: 0,\n      dataSubmit: -1\n    }\n  }\n\n  setUserInput = (index, inputText) => { \n    if( index == 0) { this.setState({\n      userIndustry: inputText\n    })} else if( index == 1 ){ this.setState({\n      userPosition: inputText\n    })} else if( index == 2 ){this.setState({\n      userLocation: inputText\n    })} else if( index == 3 ){this.setState({\n      userLocation: inputText\n    })}\n  }\n\n  setDataSubmit = (state) => { this.setState({\n      dataSubmit: state\n    })\n  }\n\n  updateSurveyResponse = (response) => { this.setState({\n      surveyResponse: [...this.state.surveyResponse, parseInt(response)]\n    })\n  }\n\n  goToNextSurvey = () => { this.setState({\n      surveyNum: this.state.surveyNum + 1,\n      selectedAnswer: -1,\n      pressSubmit: 0\n    })\n  }\n\n  skipQuestions = (questionNum) => { this.setState({\n      questionNum: questionNum\n    })\n  }\n\n  setSubmit = (state) => { this.setState({\n      pressSubmit: state\n    })\n  }\n\n  incrementValue = (value) => { this.setState({\n      value: this.state.value + parseInt(value)\n    })\n  }\n\n  setSelectedValue = (value) => { this.setState({\n      selectedValue: parseInt(value)\n    })\n  }\n\n  resetSelected = () => { this.setState({\n      selectedAnswer: -1,\n      pressSubmit: 0\n    })\n  }\n\n  goToNextQuestion = () => { this.setState({\n      questionNum : this.state.questionNum + 1,\n      selectedAnswer: -1,\n      pressSubmit: 0\n    })\n  }\n\n\n  // goToPrevQuestion = () => { this.setState({\n  //     questionNum : this.state.questionNum - 1, \n  //     selectedAnswer: -1,\n  //     pressSubmit: 0\n  //   })\n  // }\n\n  setSelectedAnswer = (answer) => { this.setState({\n      selectedAnswer: parseInt(answer),\n      pressSubmit: 0\n     })\n  }\n\n  componentDidMount(){\n    this.fetchQuestionsWithAxios()\n  }\n\n  fetchQuestionsWithAxios(){\n    // axios.get(XMLData,\n    \n    axios.get(\"https://raw.githubusercontent.com/pond-nj/CyberSecurity-Test/main/src/xml/mc.xml\",\n      {\"Content-Type\":\"application/xml; charset=utf-8\"\n    }).then((response)=>{\n      const parser = new DOMParser()\n      var xml = parser.parseFromString(response.data,\"text/xml\")\n\n      var questionsList = Array.from(xml.getElementsByTagName(\"question\"))\n      var feedbackList = Array.from(xml.getElementsByTagName(\"feedbacks\"))\n      var surveyList = Array.from(xml.getElementsByTagName(\"surveyText\"))\n      var surveyForm = Array.from(xml.getElementsByTagName(\"surveyForm\"))\n\n      this.setState({\n          questionsList: questionsList,\n          feedbackList: feedbackList,\n          surveyList: surveyList,\n          surveyForm: surveyForm\n      })\n    }).catch( e => {\n      console.log(e)\n    })\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Header/>\n        <div id =\"wrapper\" data-role=\"content\">\n          <PageManager\n            questionNum={this.state.questionNum}\n            questionsList={this.state.questionsList}\n            selectedAnswer={this.state.selectedAnswer}\n            selectedValue={this.state.selectedValue}\n            value={this.state.value}\n            pressSubmit={this.state.pressSubmit}\n            totalQuestions={this.state.questionsList.length}\n            feedbackList={this.state.feedbackList}\n            surveyNum={this.state.surveyNum}\n            surveyList={this.state.surveyList}\n            totalSurvey={this.state.surveyList.length}\n            surveyResponse={this.state.surveyResponse}\n            surveyForm={this.state.surveyForm}\n            dataSubmit={this.state.dataSubmit}\n            \n            goToNextQuestion={this.goToNextQuestion}\n            // goToPrevQuestion={this.goToPrevQuestion}\n            setSelectedAnswer={this.setSelectedAnswer}\n            resetSelected={this.resetSelected}\n            incrementValue={this.incrementValue}\n            setSelectedValue={this.setSelectedValue}\n            setSubmit={this.setSubmit}\n            skipQuestions={this.skipQuestions}\n            goToNextSurvey={this.goToNextSurvey}\n            updateSurveyResponse={this.updateSurveyResponse}\n            setDataSubmit={this.setDataSubmit}\n            setUserTextInput={this.setUserTextInput}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}