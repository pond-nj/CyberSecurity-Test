{"ast":null,"code":"var _jsxFileName = \"/Users/nutdranai.jaruthikorn/Desktop/itsc/p-nurse-quiz/src/Question.js\";\nimport React, { useState } from \"react\";\nimport Buttons from \"./Buttons\"; //contain question text\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst QuestionText = _ref => {\n  let {\n    props\n  } = _ref;\n\n  if (props.questionNum != -1) {\n    //-1 is start menu\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"question-number\",\n        children: [\"Question \", props.questionNum + 1, \" out of 5\", props.Question]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 13\n      }, this), console.log(props.questions[props.questionNum].childNodes[1]), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"question\",\n        children: props.questions[props.questionNum].childNodes[1].textContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n    /*\n    return (props.isFetched) ? (\n        <>\n            <p className=\"question-number\">Question {props.questionNum + 1} out of 5{props.Question}</p>\n            <p className=\"question\">{props.questions[props.questionNum].childNodes[1].textContent}</p>\n        </>\n    ) : (<p>Still Loading..</p>)  */\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  }\n}; //display choices\n\n\n_c = QuestionText;\n\nconst ChoiceList = _ref2 => {\n  let {\n    props\n  } = _ref2;\n  //console.log(props)\n  console.log(props.choices);\n  const ChoicesJSX = props.choices.map((choice, index) => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ui-radio\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"answer-\" + index,\n          className: \"hovereffect ui-btn ui-corner-all ui-btn-inherit ui-btn-icon-left ui-radio-off\",\n          children: choice.childNodes[1].textContent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: \"answer-\" + props.questionNum,\n          index: index,\n          id: \"answer-\" + index,\n          value: choice.childNodes[3].textContent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  });\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"mc cf\",\n    onChange: event => {\n      props.setSelectedAnswer(event.target.getAttribute(\"index\"));\n      console.log(\"value\" + event.target.getAttribute(\"value\"));\n      props.setSelectedValue(parseInt(event.target.getAttribute(\"value\")));\n    },\n    children: ChoicesJSX\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n\n_c2 = ChoiceList;\n\nconst Messages = _ref3 => {\n  let {\n    props\n  } = _ref3;\n  //console.log(props.selectedAnswer)\n  const Message = props.pressSubmit == 1 && props.selectedAnswer == -1 ? \"Please answer the above question.\" : \"\";\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"messages\",\n    children: Message\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 13\n  }, this);\n};\n\n_c3 = Messages;\n\nconst Question = props => {\n  //console.log( props )\n  console.log(props.questionNum);\n\n  if (props.questionNum != -1) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"question cf\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"instruction\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(QuestionText, {\n          props: props\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(ChoiceList, {\n          props: props\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Messages, {\n          props: props\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"value: \", props.value]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"selectedValue: \", props.selectedValue]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Buttons, {\n        props: props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  }\n};\n\n_c4 = Question;\nexport default Question;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"QuestionText\");\n$RefreshReg$(_c2, \"ChoiceList\");\n$RefreshReg$(_c3, \"Messages\");\n$RefreshReg$(_c4, \"Question\");","map":{"version":3,"sources":["/Users/nutdranai.jaruthikorn/Desktop/itsc/p-nurse-quiz/src/Question.js"],"names":["React","useState","Buttons","QuestionText","props","questionNum","Question","console","log","questions","childNodes","textContent","ChoiceList","choices","ChoicesJSX","map","choice","index","event","setSelectedAnswer","target","getAttribute","setSelectedValue","parseInt","Messages","Message","pressSubmit","selectedAnswer","value","selectedValue"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\"\nimport Buttons from \"./Buttons\"\n\n//contain question text\nconst QuestionText = ({props}) => {\n    if( props.questionNum != -1 ){ //-1 is start menu\n        return (<>\n            <p className=\"question-number\">Question {props.questionNum + 1} out of 5{props.Question}</p>\n            {console.log(props.questions[props.questionNum].childNodes[1])}\n            <p className=\"question\">{props.questions[props.questionNum].childNodes[1].textContent}</p>\n        </>)\n        \n        /*\n        return (props.isFetched) ? (\n            <>\n                <p className=\"question-number\">Question {props.questionNum + 1} out of 5{props.Question}</p>\n                <p className=\"question\">{props.questions[props.questionNum].childNodes[1].textContent}</p>\n            </>\n        ) : (<p>Still Loading..</p>)  */\n\n    } else { return <></> }\n}\n\n\n//display choices\nconst ChoiceList = ({props}) => {\n    //console.log(props)\n\n    console.log( props.choices )\n\n    const ChoicesJSX = props.choices.map( (choice, index) => {\n        return(\n            <>\n                <div className=\"ui-radio\">\n                <label\n                    htmlFor={\"answer-\"+index}\n                    className={\"hovereffect ui-btn ui-corner-all ui-btn-inherit ui-btn-icon-left ui-radio-off\"}>\n\n                {choice.childNodes[1].textContent}\n                </label>\n                <input\n                    type=\"radio\"\n                    name={\"answer-\"+props.questionNum}\n                    index={index}\n                    id={\"answer-\"+index}\n                    value={choice.childNodes[3].textContent}/>\n                </div>\n            </>)\n    })\n\n    return(\n        <form className=\"mc cf\" onChange={(event) => {\n            props.setSelectedAnswer(event.target.getAttribute(\"index\"))\n            console.log( \"value\" + event.target.getAttribute(\"value\"))\n            props.setSelectedValue(parseInt(event.target.getAttribute(\"value\")))\n            }}>\n        {ChoicesJSX}\n        </form>\n    )\n}\n\nconst Messages = ({props}) => {\n    //console.log(props.selectedAnswer)\n    const Message = (props.pressSubmit == 1 && props.selectedAnswer == -1)? \"Please answer the above question.\" : \"\"\n\n    return (<p className=\"messages\">{Message}</p>)\n}\n\nconst Question = (props) => {\n    //console.log( props )\n    console.log( props.questionNum )\n    if( props.questionNum != - 1){\n        return(<>\n            <section className=\"question cf\">\n                <p className=\"instruction\"></p>\n                <QuestionText props={props} />\n                <ChoiceList props={props}/>\n                <Messages props = {props}/>\n            </section>\n\n            <p>value: {props.value}</p>\n            <p>selectedValue: {props.selectedValue}</p>\n\n            <Buttons\n                props={props}\n            />\n        </>)\n    }else { return(<></>)}\n}\n\nexport default Question"]},"metadata":{},"sourceType":"module"}