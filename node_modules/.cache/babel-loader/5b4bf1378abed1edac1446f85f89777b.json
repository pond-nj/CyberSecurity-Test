{"ast":null,"code":"var _jsxFileName = \"/Users/nutdranaijaruthikorn/Downloads/2022/itsc/p-nurse-quiz/CyberSecurity-Test/src/App.js\";\nimport Header from './Header';\nimport PageManager from './PageManager';\nimport React from 'react';\nimport axios from 'axios'; // import XMLData from './xml/mc.xml'\n\nimport './mcstyle.css';\n/*\n  Problem:\n\n    change page title\n\n    Responder can comeback to edit choice\n\n    collect survey on user feeling, send data to server\n\n    ## change survey to a new module\n\n    ## change state that's string but is supposed to be int to int\n\n    ## create page manager\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setUserInput = (index, inputText) => {\n      if (index == 0) {\n        this.setState({\n          userIndustry: inputText\n        });\n      } else if (index == 1) {\n        this.setState({\n          userPosition: inputText\n        });\n      } else if (index == 2) {\n        this.setState({\n          userLocation: inputText\n        });\n      } else if (index == 3) {\n        this.setState({\n          userComment: inputText\n        });\n      }\n    };\n\n    this.setDataSubmit = state => {\n      this.setState({\n        dataSubmit: state\n      });\n    };\n\n    this.updateUserChoice = response => {\n      this.setState({\n        userChoice: [...this.state.userChoice, parseInt(response)]\n      });\n    };\n\n    this.updateSurveyResponse = response => {\n      this.setState({\n        surveyResponse: [...this.state.surveyResponse, parseInt(response)]\n      });\n    };\n\n    this.goToNextSurvey = () => {\n      this.setState({\n        surveyNum: this.state.surveyNum + 1,\n        selectedAnswer: -1,\n        pressSubmit: 0\n      });\n    };\n\n    this.skipQuestions = questionNum => {\n      this.setState({\n        questionNum: questionNum\n      });\n    };\n\n    this.setSubmit = state => {\n      this.setState({\n        pressSubmit: state\n      });\n    };\n\n    this.incrementValue = value => {\n      this.setState({\n        value: this.state.value + parseInt(value)\n      });\n    };\n\n    this.setSelectedValue = value => {\n      this.setState({\n        selectedValue: parseInt(value)\n      });\n    };\n\n    this.resetSelected = () => {\n      this.setState({\n        selectedAnswer: -1,\n        pressSubmit: 0\n      });\n    };\n\n    this.goToNextQuestion = () => {\n      this.setState({\n        questionNum: this.state.questionNum + 1,\n        selectedAnswer: -1,\n        pressSubmit: 0\n      });\n    };\n\n    this.setSelectedAnswer = answer => {\n      this.setState({\n        selectedAnswer: parseInt(answer),\n        pressSubmit: 0\n      });\n    };\n\n    this.state = {\n      questionsList: [],\n      feedbackList: [],\n      //xmlnode that contains feedback data\n      surveyList: [],\n      //\n      surveyForm: [],\n      questionNum: -1,\n      //0 to total no. of question-1, 0 is the first question\n      surveyNum: -1,\n      value: 0,\n      surveyResponse: [],\n      //save user's multiple choice response in this array\n      userChoice: [],\n      userIndustry: \"\",\n      userPosition: \"\",\n      userLocation: \"\",\n      //save user's text input in this array\n      userComment: \"\",\n      selectedValue: -1,\n      selectedAnswer: -1,\n      pressSubmit: 0,\n      dataSubmit: -1\n    };\n  }\n\n  componentDidMount() {\n    this.fetchQuestionsWithAxios();\n  }\n\n  fetchQuestionsWithAxios() {\n    // axios.get(XMLData,\n    axios.get(\"https://raw.githubusercontent.com/pond-nj/CyberSecurity-Test/main/src/xml/mc.xml\", {\n      \"Content-Type\": \"application/xml; charset=utf-8\"\n    }).then(response => {\n      const parser = new DOMParser();\n      var xml = parser.parseFromString(response.data, \"text/xml\");\n      var questionsList = Array.from(xml.getElementsByTagName(\"question\"));\n      var feedbackList = Array.from(xml.getElementsByTagName(\"feedbacks\"));\n      var surveyList = Array.from(xml.getElementsByTagName(\"surveyText\"));\n      var surveyForm = Array.from(xml.getElementsByTagName(\"surveyForm\"));\n      this.setState({\n        questionsList: questionsList,\n        feedbackList: feedbackList,\n        surveyList: surveyList,\n        surveyForm: surveyForm\n      });\n    }).catch(e => {\n      console.log(e);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"wrapper\",\n        \"data-role\": \"content\",\n        children: /*#__PURE__*/_jsxDEV(PageManager, {\n          questionNum: this.state.questionNum,\n          questionsList: this.state.questionsList,\n          selectedAnswer: this.state.selectedAnswer,\n          selectedValue: this.state.selectedValue,\n          value: this.state.value,\n          pressSubmit: this.state.pressSubmit,\n          totalQuestions: this.state.questionsList.length,\n          feedbackList: this.state.feedbackList,\n          surveyNum: this.state.surveyNum,\n          surveyList: this.state.surveyList,\n          totalSurvey: this.state.surveyList.length,\n          surveyResponse: this.state.surveyResponse,\n          surveyForm: this.state.surveyForm,\n          dataSubmit: this.state.dataSubmit,\n          userIndustry: this.state.userIndustry,\n          userPosition: this.state.userPosition,\n          userLocation: this.state.userLocation,\n          userComment: this.state.userComment,\n          goToNextQuestion: this.goToNextQuestion // goToPrevQuestion={this.goToPrevQuestion}\n          ,\n          setSelectedAnswer: this.setSelectedAnswer,\n          resetSelected: this.resetSelected,\n          incrementValue: this.incrementValue,\n          setSelectedValue: this.setSelectedValue,\n          setSubmit: this.setSubmit,\n          skipQuestions: this.skipQuestions,\n          goToNextSurvey: this.goToNextSurvey,\n          updateSurveyResponse: this.updateSurveyResponse,\n          setDataSubmit: this.setDataSubmit,\n          setUserInput: this.setUserInput,\n          updateUserChoice: this.updateUserChoice\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/nutdranaijaruthikorn/Downloads/2022/itsc/p-nurse-quiz/CyberSecurity-Test/src/App.js"],"names":["Header","PageManager","React","axios","App","Component","constructor","props","setUserInput","index","inputText","setState","userIndustry","userPosition","userLocation","userComment","setDataSubmit","state","dataSubmit","updateUserChoice","response","userChoice","parseInt","updateSurveyResponse","surveyResponse","goToNextSurvey","surveyNum","selectedAnswer","pressSubmit","skipQuestions","questionNum","setSubmit","incrementValue","value","setSelectedValue","selectedValue","resetSelected","goToNextQuestion","setSelectedAnswer","answer","questionsList","feedbackList","surveyList","surveyForm","componentDidMount","fetchQuestionsWithAxios","get","then","parser","DOMParser","xml","parseFromString","data","Array","from","getElementsByTagName","catch","e","console","log","render","length"],"mappings":"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","sourcesContent":["import Header from './Header'\nimport PageManager from './PageManager'\nimport React from 'react'\nimport axios from 'axios'\n\n// import XMLData from './xml/mc.xml'\nimport './mcstyle.css'\n\n\n/*\n  Problem:\n\n    change page title\n\n    Responder can comeback to edit choice\n\n    collect survey on user feeling, send data to server\n\n    ## change survey to a new module\n\n    ## change state that's string but is supposed to be int to int\n\n    ## create page manager\n*/\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props)\n    this.state = {\n      questionsList: [],\n      feedbackList: [], //xmlnode that contains feedback data\n      surveyList: [], //\n      surveyForm: [],\n\n      questionNum: -1, //0 to total no. of question-1, 0 is the first question\n      surveyNum: -1,\n      value: 0,\n      surveyResponse: [], //save user's multiple choice response in this array\n      userChoice: [],\n      userIndustry: \"\",\n      userPosition: \"\",\n      userLocation: \"\", //save user's text input in this array\n      userComment: \"\",\n\n      selectedValue: -1,\n      selectedAnswer: -1,\n      pressSubmit: 0,\n      dataSubmit: -1\n    }\n  }\n\n  setUserInput = (index, inputText) => { \n    if( index == 0) { this.setState({\n      userIndustry: inputText\n    })} else if( index == 1 ){ this.setState({\n      userPosition: inputText\n    })} else if( index == 2 ){this.setState({\n      userLocation: inputText\n    })} else if( index == 3 ){this.setState({\n      userComment: inputText\n    })}\n  }\n\n  setDataSubmit = (state) => { this.setState({\n      dataSubmit: state\n    })\n  }\n\n  updateUserChoice = (response) => { this.setState({\n    userChoice: [...this.state.userChoice, parseInt(response)]\n  })}\n\n  updateSurveyResponse = (response) => { this.setState({\n      surveyResponse: [...this.state.surveyResponse, parseInt(response)]\n    })\n  }\n\n  goToNextSurvey = () => { this.setState({\n      surveyNum: this.state.surveyNum + 1,\n      selectedAnswer: -1,\n      pressSubmit: 0\n    })\n  }\n\n  skipQuestions = (questionNum) => { this.setState({\n      questionNum: questionNum\n    })\n  }\n\n  setSubmit = (state) => { this.setState({\n      pressSubmit: state\n    })\n  }\n\n  incrementValue = (value) => { this.setState({\n      value: this.state.value + parseInt(value)\n    })\n  }\n\n  setSelectedValue = (value) => { this.setState({\n      selectedValue: parseInt(value)\n    })\n  }\n\n  resetSelected = () => { this.setState({\n      selectedAnswer: -1,\n      pressSubmit: 0\n    })\n  }\n\n  goToNextQuestion = () => { this.setState({\n      questionNum : this.state.questionNum + 1,\n      selectedAnswer: -1,\n      pressSubmit: 0\n    })\n  }\n\n\n  // goToPrevQuestion = () => { this.setState({\n  //     questionNum : this.state.questionNum - 1, \n  //     selectedAnswer: -1,\n  //     pressSubmit: 0\n  //   })\n  // }\n\n  setSelectedAnswer = (answer) => { this.setState({\n      selectedAnswer: parseInt(answer),\n      pressSubmit: 0\n     })\n  }\n\n  componentDidMount(){\n    this.fetchQuestionsWithAxios()\n  }\n\n  fetchQuestionsWithAxios(){\n    // axios.get(XMLData,\n    \n    axios.get(\"https://raw.githubusercontent.com/pond-nj/CyberSecurity-Test/main/src/xml/mc.xml\",\n      {\"Content-Type\":\"application/xml; charset=utf-8\"\n    }).then((response)=>{\n      const parser = new DOMParser()\n      var xml = parser.parseFromString(response.data,\"text/xml\")\n\n      var questionsList = Array.from(xml.getElementsByTagName(\"question\"))\n      var feedbackList = Array.from(xml.getElementsByTagName(\"feedbacks\"))\n      var surveyList = Array.from(xml.getElementsByTagName(\"surveyText\"))\n      var surveyForm = Array.from(xml.getElementsByTagName(\"surveyForm\"))\n\n      this.setState({\n          questionsList: questionsList,\n          feedbackList: feedbackList,\n          surveyList: surveyList,\n          surveyForm: surveyForm\n      })\n    }).catch( e => {\n      console.log(e)\n    })\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Header/>\n        <div id =\"wrapper\" data-role=\"content\">\n          <PageManager\n            questionNum={this.state.questionNum}\n            questionsList={this.state.questionsList}\n            selectedAnswer={this.state.selectedAnswer}\n            selectedValue={this.state.selectedValue}\n            value={this.state.value}\n            pressSubmit={this.state.pressSubmit}\n            totalQuestions={this.state.questionsList.length}\n            feedbackList={this.state.feedbackList}\n            surveyNum={this.state.surveyNum}\n            surveyList={this.state.surveyList}\n            totalSurvey={this.state.surveyList.length}\n            surveyResponse={this.state.surveyResponse}\n            surveyForm={this.state.surveyForm}\n            dataSubmit={this.state.dataSubmit}\n            userIndustry={this.state.userIndustry}\n            userPosition={this.state.userPosition}\n            userLocation={this.state.userLocation}\n            userComment={this.state.userComment}\n            \n            goToNextQuestion={this.goToNextQuestion}\n            // goToPrevQuestion={this.goToPrevQuestion}\n            setSelectedAnswer={this.setSelectedAnswer}\n            resetSelected={this.resetSelected}\n            incrementValue={this.incrementValue}\n            setSelectedValue={this.setSelectedValue}\n            setSubmit={this.setSubmit}\n            skipQuestions={this.skipQuestions}\n            goToNextSurvey={this.goToNextSurvey}\n            updateSurveyResponse={this.updateSurveyResponse}\n            setDataSubmit={this.setDataSubmit}\n            setUserInput={this.setUserInput}\n            updateUserChoice={this.updateUserChoice}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}